{"version":3,"file":"index.modern.js","sources":["../src/util.ts","../src/Digest.ts","../src/signers/ES256KSigner.ts","../src/signers/SimpleSigner.ts","../src/signers/EllipticSigner.ts","../src/signers/EdDSASigner.ts","../src/signers/NaclSigner.ts","../src/SignerAlgorithm.ts","../src/blockchains/utils/ripemd160.ts","../src/blockchains/bip122.ts","../src/blockchains/cosmos.ts","../src/blockchains/index.ts","../src/VerifierAlgorithm.ts","../src/JWT.ts","../src/JWE.ts","../src/ECDH.ts","../src/xc20pEncryption.ts"],"sourcesContent":["import * as u8a from 'uint8arrays'\nimport { bases } from 'multiformats/basics'\n\n/**\n * @deprecated Signers will be expected to return base64url `string` signatures.\n */\nexport interface EcdsaSignature {\n  r: string\n  s: string\n  recoveryParam?: number | null\n}\n\nexport function bytesToBase64url(b: Uint8Array): string {\n  return u8a.toString(b, 'base64url')\n}\n\nexport function base64ToBytes(s: string): Uint8Array {\n  const inputBase64Url = s.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '')\n  return u8a.fromString(inputBase64Url, 'base64url')\n}\n\nexport function bytesToBase64(b: Uint8Array): string {\n  return u8a.toString(b, 'base64pad')\n}\n\nexport function base58ToBytes(s: string): Uint8Array {\n  return u8a.fromString(s, 'base58btc')\n}\n\nexport function bytesToBase58(b: Uint8Array): string {\n  return u8a.toString(b, 'base58btc')\n}\n\nexport function bytesToMultibase(b: Uint8Array, base: keyof typeof bases): string {\n  return bases[base].encode(b)\n}\n\nexport function hexToBytes(s: string): Uint8Array {\n  const input = s.startsWith('0x') ? s.substring(2) : s\n  return u8a.fromString(input.toLowerCase(), 'base16')\n}\n\nexport function encodeBase64url(s: string): string {\n  return bytesToBase64url(u8a.fromString(s))\n}\n\nexport function decodeBase64url(s: string): string {\n  return u8a.toString(base64ToBytes(s))\n}\n\nexport function bytesToHex(b: Uint8Array): string {\n  return u8a.toString(b, 'base16')\n}\n\nexport function stringToBytes(s: string): Uint8Array {\n  return u8a.fromString(s)\n}\n\nexport function toJose({ r, s, recoveryParam }: EcdsaSignature, recoverable?: boolean): string {\n  const jose = new Uint8Array(recoverable ? 65 : 64)\n  jose.set(u8a.fromString(r, 'base16'), 0)\n  jose.set(u8a.fromString(s, 'base16'), 32)\n  if (recoverable) {\n    if (typeof recoveryParam === 'undefined') {\n      throw new Error('Signer did not return a recoveryParam')\n    }\n    jose[64] = <number>recoveryParam\n  }\n  return bytesToBase64url(jose)\n}\n\nexport function fromJose(signature: string): { r: string; s: string; recoveryParam?: number } {\n  const signatureBytes: Uint8Array = base64ToBytes(signature)\n  if (signatureBytes.length < 64 || signatureBytes.length > 65) {\n    throw new TypeError(`Wrong size for signature. Expected 64 or 65 bytes, but got ${signatureBytes.length}`)\n  }\n  const r = bytesToHex(signatureBytes.slice(0, 32))\n  const s = bytesToHex(signatureBytes.slice(32, 64))\n  const recoveryParam = signatureBytes.length === 65 ? signatureBytes[64] : undefined\n  return { r, s, recoveryParam }\n}\n\nexport function toSealed(ciphertext: string, tag: string): Uint8Array {\n  return u8a.concat([base64ToBytes(ciphertext), base64ToBytes(tag)])\n}\n\nconst hexMatcher = /^(0x)?([a-fA-F0-9]{64}|[a-fA-F0-9]{128})$/\nconst base58Matcher = /^([1-9A-HJ-NP-Za-km-z]{44}|[1-9A-HJ-NP-Za-km-z]{88})$/\nconst base64Matcher = /^([0-9a-zA-Z=\\-_+/]{43}|[0-9a-zA-Z=\\-_+/]{86})(={0,2})$/\n\n/**\n * Parses a private key and returns the Uint8Array representation.\n * This method uses an heuristic to determine the key encoding to then be able to parse it into 32 or 64 bytes.\n *\n * @param input a 32 or 64 byte key presented either as a Uint8Array or as a hex, base64, or base58btc encoded string\n *\n * @throws TypeError('Invalid private key format') if the key doesn't match any of the accepted formats or length\n */\nexport function parseKey(input: string | Uint8Array): Uint8Array {\n  if (typeof input === 'string') {\n    if (hexMatcher.test(input)) {\n      return hexToBytes(input)\n    } else if (base58Matcher.test(input)) {\n      return base58ToBytes(input)\n    } else if (base64Matcher.test(input)) {\n      return base64ToBytes(input)\n    } else {\n      throw TypeError('bad_key: Invalid private key format')\n    }\n  } else if (input instanceof Uint8Array) {\n    return input\n  } else {\n    throw TypeError('bad_key: Invalid private key format')\n  }\n}\n\nexport function leftpad(data: string, size = 64): string {\n  if (data.length === size) return data\n  return '0'.repeat(size - data.length) + data\n}\n","import { hash } from '@stablelib/sha256'\nimport * as u8a from 'uint8arrays'\nimport { keccak_256 } from 'js-sha3' // eslint-disable-line\n\nexport function sha256(payload: string | Uint8Array): Uint8Array {\n  const data = typeof payload === 'string' ? u8a.fromString(payload) : payload\n  return hash(data)\n}\n\nexport function keccak(data: Uint8Array): Uint8Array {\n  return new Uint8Array(keccak_256.arrayBuffer(data))\n}\n\nexport function toEthereumAddress(hexPublicKey: string): string {\n  const hashInput = u8a.fromString(hexPublicKey.slice(2), 'base16')\n  return `0x${u8a.toString(keccak(hashInput).slice(-20), 'base16')}`\n}\n\nfunction writeUint32BE(value: number, array = new Uint8Array(4)): Uint8Array {\n  const encoded = u8a.fromString(value.toString(), 'base10')\n  array.set(encoded, 4 - encoded.length)\n  return array\n}\n\nconst lengthAndInput = (input: Uint8Array): Uint8Array => u8a.concat([writeUint32BE(input.length), input])\n\n// This implementation of concatKDF was inspired by these two implementations:\n// https://github.com/digitalbazaar/minimal-cipher/blob/master/algorithms/ecdhkdf.js\n// https://github.com/panva/jose/blob/master/lib/jwa/ecdh/derive.js\nexport function concatKDF(\n  secret: Uint8Array,\n  keyLen: number,\n  alg: string,\n  producerInfo?: Uint8Array,\n  consumerInfo?: Uint8Array\n): Uint8Array {\n  if (keyLen !== 256) throw new Error(`Unsupported key length: ${keyLen}`)\n  const value = u8a.concat([\n    lengthAndInput(u8a.fromString(alg)),\n    lengthAndInput(typeof producerInfo === 'undefined' ? new Uint8Array(0) : producerInfo), // apu\n    lengthAndInput(typeof consumerInfo === 'undefined' ? new Uint8Array(0) : consumerInfo), // apv\n    writeUint32BE(keyLen),\n  ])\n\n  // since our key lenght is 256 we only have to do one round\n  const roundNumber = 1\n  return hash(u8a.concat([writeUint32BE(roundNumber), secret, value]))\n}\n","import { parseKey, leftpad } from '../util'\nimport { toJose } from '../util'\nimport { Signer } from '../JWT'\nimport { sha256 } from '../Digest'\n\nimport { ec as EC, ec } from 'elliptic'\nconst secp256k1: EC = new EC('secp256k1')\n\n/**\n *  Creates a configured signer function for signing data using the ES256K (secp256k1 + sha256) algorithm.\n *\n *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature\n *\n *  @example\n *  ```typescript\n *  const sign: Signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  const signature: string = await sign(data)\n *  ```\n *\n *  @param    {String}    privateKey   a private key as `Uint8Array` or encoded as `base64`, `base58`, or `hex` string\n *  @param    {Boolean}   recoverable  an optional flag to add the recovery param to the generated signatures\n *  @return   {Function}               a configured signer function `(data: string | Uint8Array): Promise<string>`\n */\nexport function ES256KSigner(privateKey: string | Uint8Array, recoverable = false): Signer {\n  const privateKeyBytes: Uint8Array = parseKey(privateKey)\n  if (privateKeyBytes.length !== 32) {\n    throw new Error(`bad_key: Invalid private key format. Expecting 32 bytes, but got ${privateKeyBytes.length}`)\n  }\n  const keyPair: ec.KeyPair = secp256k1.keyFromPrivate(privateKeyBytes)\n\n  return async (data: string | Uint8Array): Promise<string> => {\n    const { r, s, recoveryParam }: EC.Signature = keyPair.sign(sha256(data))\n    return toJose(\n      {\n        r: leftpad(r.toString('hex')),\n        s: leftpad(s.toString('hex')),\n        recoveryParam,\n      },\n      recoverable\n    )\n  }\n}\n","import { fromJose } from '../util'\nimport { Signer } from '../JWT'\nimport { ES256KSigner } from './ES256KSigner'\n\n/**\n * @deprecated Please use ES256KSigner\n *  The SimpleSigner returns a configured function for signing data.\n *\n *  @example\n *  const signer = SimpleSigner(process.env.PRIVATE_KEY)\n *  signer(data, (err, signature) => {\n *    ...\n *  })\n *\n *  @param    {String}         hexPrivateKey    a hex encoded private key\n *  @return   {Function}                     a configured signer function\n */\nfunction SimpleSigner(hexPrivateKey: string): Signer {\n  const signer = ES256KSigner(hexPrivateKey, true)\n  return async (data) => {\n    const signature = (await signer(data)) as string\n    return fromJose(signature)\n  }\n}\n\nexport default SimpleSigner\n","import { Signer } from '../JWT'\nimport { ES256KSigner } from './ES256KSigner'\n\n/**\n * @deprecated Please use ES256KSigner\n *  The EllipticSigner returns a configured function for signing data.\n *\n *  @example\n *  ```typescript\n *  const signer = EllipticSigner(process.env.PRIVATE_KEY)\n *  signer(data).then( (signature: string) => {\n *    ...\n *  })\n *  ```\n *\n *  @param    {String}         hexPrivateKey    a hex encoded private key\n *  @return   {Function}                        a configured signer function\n */\nfunction EllipticSigner(hexPrivateKey: string): Signer {\n  return ES256KSigner(hexPrivateKey)\n}\n\nexport default EllipticSigner\n","import { sign } from '@stablelib/ed25519'\nimport { Signer } from '../JWT'\nimport { bytesToBase64url, parseKey, stringToBytes } from '../util'\n\n/**\n *  Creates a configured signer function for signing data using the EdDSA (Ed25519) algorithm.\n *\n *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature\n *\n *  @example\n *  ```typescript\n *  const sign: Signer = EdDSASigner(process.env.PRIVATE_KEY)\n *  const signature: string = await sign(data)\n *  ```\n *\n *  @param    {String}    secretKey   a 64 byte secret key as `Uint8Array` or encoded as `base64`, `base58`, or `hex` string\n *  @return   {Function}              a configured signer function `(data: string | Uint8Array): Promise<string>`\n */\nexport function EdDSASigner(secretKey: string | Uint8Array): Signer {\n  const privateKeyBytes: Uint8Array = parseKey(secretKey)\n  if (privateKeyBytes.length !== 64) {\n    throw new Error(`bad_key: Invalid private key format. Expecting 64 bytes, but got ${privateKeyBytes.length}`)\n  }\n  return async (data: string | Uint8Array): Promise<string> => {\n    const dataBytes: Uint8Array = typeof data === 'string' ? stringToBytes(data) : data\n    const sig: Uint8Array = sign(privateKeyBytes, dataBytes)\n    return bytesToBase64url(sig)\n  }\n}\n","import { EdDSASigner as EdDSASigner } from './EdDSASigner'\nimport { Signer } from '../JWT'\n\n/**\n * @deprecated Please use EdDSASigner\n *\n *  The NaclSigner returns a configured function for signing data using the Ed25519 algorithm.\n *\n *  The signing function itself takes the data as a `string` or `Uint8Array` parameter and returns a `base64Url`-encoded signature.\n *\n *  @example\n *  const signer = NaclSigner(process.env.PRIVATE_KEY)\n *  const data: string = '...'\n *  signer(data).then( (signature: string) => {\n *    ...\n *  })\n *\n *  @param    {String}   base64PrivateKey    a 64 byte base64 encoded private key\n *  @return   {Function}                     a configured signer function\n */\n\nfunction NaclSigner(base64PrivateKey: string): Signer {\n  return EdDSASigner(base64PrivateKey)\n}\n\nexport default NaclSigner\n","import { Signer, SignerAlgorithm } from './JWT'\nimport { EcdsaSignature, fromJose, toJose } from './util'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction instanceOfEcdsaSignature(object: any): object is EcdsaSignature {\n  return typeof object === 'object' && 'r' in object && 's' in object\n}\n\nexport function ES256KSignerAlg(recoverable?: boolean): SignerAlgorithm {\n  return async function sign(payload: string, signer: Signer): Promise<string> {\n    const signature: EcdsaSignature | string = await signer(payload)\n    if (instanceOfEcdsaSignature(signature)) {\n      return toJose(signature, recoverable)\n    } else {\n      if (recoverable && typeof fromJose(signature).recoveryParam === 'undefined') {\n        throw new Error(`not_supported: ES256K-R not supported when signer doesn't provide a recovery param`)\n      }\n      return signature\n    }\n  }\n}\n\nexport function Ed25519SignerAlg(): SignerAlgorithm {\n  return async function sign(payload: string, signer: Signer): Promise<string> {\n    const signature: EcdsaSignature | string = await signer(payload)\n    if (!instanceOfEcdsaSignature(signature)) {\n      return signature\n    } else {\n      throw new Error('invalid_config: expected a signer function that returns a string instead of signature object')\n    }\n  }\n}\n\ninterface SignerAlgorithms {\n  [alg: string]: SignerAlgorithm\n}\n\nconst algorithms: SignerAlgorithms = {\n  ES256K: ES256KSignerAlg(),\n  // This is a non-standard algorithm but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/146\n  'ES256K-R': ES256KSignerAlg(true),\n  // This is actually incorrect but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/130\n  Ed25519: Ed25519SignerAlg(),\n  EdDSA: Ed25519SignerAlg(),\n}\n\nfunction SignerAlg(alg: string): SignerAlgorithm {\n  const impl: SignerAlgorithm = algorithms[alg]\n  if (!impl) throw new Error(`not_supported: Unsupported algorithm ${alg}`)\n  return impl\n}\n\nexport default SignerAlg\n","// https://github.com/crypto-browserify/ripemd160/blob/master/index.js\n\nconst zl = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14,\n  4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2,\n  10, 14, 1, 3, 8, 11, 6, 15, 13,\n]\n\nconst zr = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1,\n  3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5,\n  8, 7, 6, 2, 13, 14, 0, 3, 9, 11,\n]\n\nconst sl = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11,\n  13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5,\n  11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6,\n]\n\nconst sr = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7,\n  15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9,\n  12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11,\n]\n\nconst hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]\nconst hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]\n\nfunction rotl(x: number, n: number) {\n  return (x << n) | (x >>> (32 - n))\n}\n\nfunction fn1(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn2(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + ((b & c) | (~b & d)) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn3(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + ((b | ~c) ^ d) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn4(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + ((b & d) | (c & ~d)) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn5(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + (b ^ (c | ~d)) + m + k) | 0, s) + e) | 0\n}\n\nexport class Ripemd160 {\n  // state\n  private _a = 0x67452301\n  private _b = 0xefcdab89\n  private _c = 0x98badcfe\n  private _d = 0x10325476\n  private _e = 0xc3d2e1f0\n  private _blockOffset = 0\n  private _block: Uint8Array\n  private _blockSize: number\n  private _length = [0, 0, 0, 0]\n  private _finalized: boolean\n\n  constructor(blockSize = 64) {\n    this._block = new Uint8Array(blockSize)\n    this._blockSize = blockSize\n    this._blockOffset = 0\n    this._length = [0, 0, 0, 0]\n    this._finalized = false\n  }\n\n  update = (data: Uint8Array): Ripemd160 => {\n    if (this._finalized) throw new Error('Digest already called')\n\n    // consume data\n    const block = this._block\n    let offset = 0\n    while (this._blockOffset + data.length - offset >= this._blockSize) {\n      for (let i = this._blockOffset; i < this._blockSize; ) block[i++] = data[offset++]\n      this._update()\n      this._blockOffset = 0\n    }\n    while (offset < data.length) block[this._blockOffset++] = data[offset++]\n\n    // update length\n    for (let j = 0, carry = data.length * 8; carry > 0; ++j) {\n      this._length[j] += carry\n      carry = (this._length[j] / 0x0100000000) | 0\n      if (carry > 0) this._length[j] -= 0x0100000000 * carry\n    }\n\n    return this\n  }\n\n  digest = (): Uint8Array => {\n    if (this._finalized) throw new Error('Digest already called')\n    this._finalized = true\n\n    const digest = this._digest()\n\n    // reset state\n    this._block.fill(0)\n    this._blockOffset = 0\n    for (let i = 0; i < 4; ++i) this._length[i] = 0\n\n    return digest\n  }\n\n  private _update = () => {\n    const words = new Array(16)\n    const temp = new DataView(this._block.buffer)\n    for (let j = 0; j < 16; ++j) words[j] = words[j] = temp.getInt32(j * 4, true)\n\n    let al = this._a | 0\n    let bl = this._b | 0\n    let cl = this._c | 0\n    let dl = this._d | 0\n    let el = this._e | 0\n\n    let ar = this._a | 0\n    let br = this._b | 0\n    let cr = this._c | 0\n    let dr = this._d | 0\n    let er = this._e | 0\n\n    // computation\n    for (let i = 0; i < 80; i += 1) {\n      let tl\n      let tr\n      if (i < 16) {\n        tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])\n        tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])\n      } else if (i < 32) {\n        tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])\n        tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])\n      } else if (i < 48) {\n        tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])\n        tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])\n      } else if (i < 64) {\n        tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])\n        tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])\n      } else {\n        // if (i<80) {\n        tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])\n        tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])\n      }\n\n      al = el\n      el = dl\n      dl = rotl(cl, 10)\n      cl = bl\n      bl = tl\n\n      ar = er\n      er = dr\n      dr = rotl(cr, 10)\n      cr = br\n      br = tr\n    }\n\n    // update state\n    const t = (this._b + cl + dr) | 0\n    this._b = (this._c + dl + er) | 0\n    this._c = (this._d + el + ar) | 0\n    this._d = (this._e + al + br) | 0\n    this._e = (this._a + bl + cr) | 0\n    this._a = t\n  }\n\n  private _digest = () => {\n    // create padding and handle blocks\n    this._block[this._blockOffset++] = 0x80\n    if (this._blockOffset > 56) {\n      this._block.fill(0, this._blockOffset, 64)\n      this._update()\n      this._blockOffset = 0\n    }\n\n    this._block.fill(0, this._blockOffset, 56)\n    const temp = new DataView(this._block.buffer)\n    temp.setUint32(56, this._length[0], true)\n    temp.setUint32(60, this._length[1], true)\n    this._block = new Uint8Array(temp.buffer)\n    this._update()\n\n    // produce result\n    const buffer = new DataView(new Uint8Array(20).buffer)\n    buffer.setInt32(0, this._a, true)\n    buffer.setInt32(4, this._b, true)\n    buffer.setInt32(8, this._c, true)\n    buffer.setInt32(12, this._d, true)\n    buffer.setInt32(16, this._e, true)\n\n    return new Uint8Array(buffer.buffer)\n  }\n}\n","import * as u8a from 'uint8arrays'\nimport { bytesToBase58, base58ToBytes } from '../util'\nimport { sha256 } from '../Digest'\nimport { Ripemd160 } from './utils/ripemd160'\n\nexport const publicKeyToAddress = (publicKey: string, otherAddress: string): string => {\n  // Use the same version/prefix byte as the given address.\n  const version = u8a.toString(base58ToBytes(otherAddress).slice(0, 1), 'hex')\n  const publicKeyBuffer = u8a.fromString(publicKey, 'hex')\n  const publicKeyHash = new Ripemd160().update(sha256(publicKeyBuffer)).digest()\n  const step1 = version + u8a.toString(publicKeyHash, 'hex')\n  const step2 = sha256(u8a.fromString(step1, 'hex'))\n  const step3 = sha256(step2)\n  const checksum = u8a.toString(step3, 'hex').substring(0, 8)\n  const step4 = step1 + checksum\n  return bytesToBase58(u8a.fromString(step4, 'hex'))\n}\n","import { ec as EC } from 'elliptic'\nimport { bech32 } from 'bech32'\nimport * as u8a from 'uint8arrays'\nimport { sha256 } from '../Digest'\nimport { Ripemd160 } from './utils/ripemd160'\n\nexport const publicKeyToAddress = (publicKey: string, prefix: string): string => {\n  const ec = new EC('secp256k1')\n  const compressedPublicKey = ec.keyFromPublic(publicKey, 'hex').getPublic().encode('hex', true)\n  const publicKeyBuffer = u8a.fromString(compressedPublicKey, 'hex')\n  const hash = new Ripemd160().update(sha256(publicKeyBuffer)).digest()\n  const words = bech32.toWords(hash)\n  return bech32.encode(prefix, words).replace(prefix, '')\n}\n","import { publicKeyToAddress as bip122 } from './bip122'\nimport { publicKeyToAddress as cosmos } from './cosmos'\nimport { toEthereumAddress } from '../Digest'\n\nexport const verifyBlockchainAccountId = (publicKey: string, blockchainAccountId: string | undefined): boolean => {\n  if (blockchainAccountId) {\n    const chain = blockchainAccountId.split(':')\n    switch (chain[0]) {\n      case 'bip122':\n        chain[chain.length - 1] = bip122(publicKey, chain[chain.length - 1])\n        break\n      case 'cosmos':\n        chain[chain.length - 1] = cosmos(publicKey, chain[1])\n        break\n      case 'eip155':\n        chain[chain.length - 1] = toEthereumAddress(publicKey)\n        break\n      default:\n        return false\n    }\n    return chain.join(':') === blockchainAccountId\n  }\n  return false\n}\n","import { ec as EC, SignatureInput } from 'elliptic'\nimport { sha256, toEthereumAddress } from './Digest'\nimport { verify } from '@stablelib/ed25519'\nimport type { VerificationMethod } from 'did-resolver'\nimport { bases } from 'multiformats/basics'\nimport { hexToBytes, base58ToBytes, base64ToBytes, bytesToHex, EcdsaSignature, stringToBytes } from './util'\nimport { verifyBlockchainAccountId } from './blockchains'\n\nconst secp256k1 = new EC('secp256k1')\n\n// converts a JOSE signature to it's components\nexport function toSignatureObject(signature: string, recoverable = false): EcdsaSignature {\n  const rawSig: Uint8Array = base64ToBytes(signature)\n  if (rawSig.length !== (recoverable ? 65 : 64)) {\n    throw new Error('wrong signature length')\n  }\n  const r: string = bytesToHex(rawSig.slice(0, 32))\n  const s: string = bytesToHex(rawSig.slice(32, 64))\n  const sigObj: EcdsaSignature = { r, s }\n  if (recoverable) {\n    sigObj.recoveryParam = rawSig[64]\n  }\n  return sigObj\n}\n\ninterface LegacyVerificationMethod extends VerificationMethod {\n  publicKeyBase64: string\n}\n\nfunction extractPublicKeyBytes(pk: VerificationMethod): Uint8Array {\n  if (pk.publicKeyBase58) {\n    return base58ToBytes(pk.publicKeyBase58)\n  } else if ((<LegacyVerificationMethod>pk).publicKeyBase64) {\n    return base64ToBytes((<LegacyVerificationMethod>pk).publicKeyBase64)\n  } else if (pk.publicKeyHex) {\n    return hexToBytes(pk.publicKeyHex)\n  } else if (pk.publicKeyJwk && pk.publicKeyJwk.crv === 'secp256k1' && pk.publicKeyJwk.x && pk.publicKeyJwk.y) {\n    return hexToBytes(\n      secp256k1\n        .keyFromPublic({\n          x: bytesToHex(base64ToBytes(pk.publicKeyJwk.x)),\n          y: bytesToHex(base64ToBytes(pk.publicKeyJwk.y)),\n        })\n        .getPublic('hex')\n    )\n  } else if (pk.publicKeyMultibase) {\n    const { base16, base58btc, base64, base64url } = bases\n    const baseDecoder = base16.decoder.or(base58btc.decoder.or(base64.decoder.or(base64url.decoder)))\n    return baseDecoder.decode(pk.publicKeyMultibase)\n  }\n  return new Uint8Array()\n}\n\nexport function verifyES256K(\n  data: string,\n  signature: string,\n  authenticators: VerificationMethod[]\n): VerificationMethod {\n  const hash: Uint8Array = sha256(data)\n  const sigObj: EcdsaSignature = toSignatureObject(signature)\n  const fullPublicKeys = authenticators.filter(({ ethereumAddress, blockchainAccountId }) => {\n    return typeof ethereumAddress === 'undefined' && typeof blockchainAccountId === 'undefined'\n  })\n  const blockchainAddressKeys = authenticators.filter(({ ethereumAddress, blockchainAccountId }) => {\n    return typeof ethereumAddress !== 'undefined' || typeof blockchainAccountId !== undefined\n  })\n\n  let signer: VerificationMethod | undefined = fullPublicKeys.find((pk: VerificationMethod) => {\n    try {\n      const pubBytes = extractPublicKeyBytes(pk)\n      return secp256k1.keyFromPublic(pubBytes).verify(hash, <SignatureInput>sigObj)\n    } catch (err) {\n      return false\n    }\n  })\n\n  if (!signer && blockchainAddressKeys.length > 0) {\n    signer = verifyRecoverableES256K(data, signature, blockchainAddressKeys)\n  }\n\n  if (!signer) throw new Error('invalid_signature: Signature invalid for JWT')\n  return signer\n}\n\nexport function verifyRecoverableES256K(\n  data: string,\n  signature: string,\n  authenticators: VerificationMethod[]\n): VerificationMethod {\n  let signatures: EcdsaSignature[]\n  if (signature.length > 86) {\n    signatures = [toSignatureObject(signature, true)]\n  } else {\n    const so = toSignatureObject(signature, false)\n    signatures = [\n      { ...so, recoveryParam: 0 },\n      { ...so, recoveryParam: 1 },\n    ]\n  }\n\n  const checkSignatureAgainstSigner = (sigObj: EcdsaSignature): VerificationMethod | undefined => {\n    const hash: Uint8Array = sha256(data)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const recoveredKey: any = secp256k1.recoverPubKey(hash, <SignatureInput>sigObj, <number>sigObj.recoveryParam)\n    const recoveredPublicKeyHex: string = recoveredKey.encode('hex')\n    const recoveredCompressedPublicKeyHex: string = recoveredKey.encode('hex', true)\n    const recoveredAddress: string = toEthereumAddress(recoveredPublicKeyHex)\n\n    const signer: VerificationMethod | undefined = authenticators.find((pk: VerificationMethod) => {\n      const keyHex = bytesToHex(extractPublicKeyBytes(pk))\n      return (\n        keyHex === recoveredPublicKeyHex ||\n        keyHex === recoveredCompressedPublicKeyHex ||\n        pk.ethereumAddress?.toLowerCase() === recoveredAddress ||\n        pk.blockchainAccountId?.split('@eip155')?.[0].toLowerCase() === recoveredAddress || // CAIP-2\n        verifyBlockchainAccountId(recoveredPublicKeyHex, pk.blockchainAccountId) // CAIP-10\n      )\n    })\n\n    return signer\n  }\n\n  const signer: VerificationMethod[] = signatures\n    .map(checkSignatureAgainstSigner)\n    .filter((key) => typeof key !== 'undefined') as VerificationMethod[]\n\n  if (signer.length === 0) throw new Error('invalid_signature: Signature invalid for JWT')\n  return signer[0]\n}\n\nexport function verifyEd25519(\n  data: string,\n  signature: string,\n  authenticators: VerificationMethod[]\n): VerificationMethod {\n  const clear: Uint8Array = stringToBytes(data)\n  const sig: Uint8Array = base64ToBytes(signature)\n  const signer = authenticators.find((pk: VerificationMethod) => {\n    return verify(extractPublicKeyBytes(pk), clear, sig)\n  })\n  if (!signer) throw new Error('invalid_signature: Signature invalid for JWT')\n  return signer\n}\n\ntype Verifier = (data: string, signature: string, authenticators: VerificationMethod[]) => VerificationMethod\ninterface Algorithms {\n  [name: string]: Verifier\n}\nconst algorithms: Algorithms = {\n  ES256K: verifyES256K,\n  // This is a non-standard algorithm but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/146\n  'ES256K-R': verifyRecoverableES256K,\n  // This is actually incorrect but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/130\n  Ed25519: verifyEd25519,\n  EdDSA: verifyEd25519,\n}\n\nfunction VerifierAlgorithm(alg: string): Verifier {\n  const impl: Verifier = algorithms[alg]\n  if (!impl) throw new Error(`not_supported: Unsupported algorithm ${alg}`)\n  return impl\n}\n\nVerifierAlgorithm.toSignatureObject = toSignatureObject\n\nexport default VerifierAlgorithm\n","import canonicalizeData from 'canonicalize'\nimport type { DIDDocument, DIDResolutionResult, Resolvable, VerificationMethod } from 'did-resolver'\nimport SignerAlg from './SignerAlgorithm'\nimport { decodeBase64url, EcdsaSignature, encodeBase64url } from './util'\nimport VerifierAlgorithm from './VerifierAlgorithm'\n\nexport type Signer = (data: string | Uint8Array) => Promise<EcdsaSignature | string>\nexport type SignerAlgorithm = (payload: string, signer: Signer) => Promise<string>\n\nexport type ProofPurposeTypes =\n  | 'assertionMethod'\n  | 'authentication'\n  // | 'keyAgreement' // keyAgreement VerificationMethod should not be used for signing\n  | 'capabilityDelegation'\n  | 'capabilityInvocation'\n\nexport interface JWTOptions {\n  issuer: string\n  signer: Signer\n  /**\n   * @deprecated Please use `header.alg` to specify the JWT algorithm.\n   */\n  alg?: string\n  expiresIn?: number\n  canonicalize?: boolean\n}\n\nexport interface JWTVerifyOptions {\n  /** @deprecated Please use `proofPurpose: 'authentication' instead` */\n  auth?: boolean\n  audience?: string\n  callbackUrl?: string\n  resolver?: Resolvable\n  skewTime?: number\n  /** See https://www.w3.org/TR/did-spec-registries/#verification-relationships */\n  proofPurpose?: ProofPurposeTypes\n}\n\nexport interface JWSCreationOptions {\n  canonicalize?: boolean\n}\n\nexport interface DIDAuthenticator {\n  authenticators: VerificationMethod[]\n  issuer: string\n  didResolutionResult: DIDResolutionResult\n}\n\nexport interface JWTHeader {\n  typ: 'JWT'\n  alg: string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [x: string]: any\n}\n\nexport interface JWTPayload {\n  iss?: string\n  sub?: string\n  aud?: string | string[]\n  iat?: number\n  nbf?: number\n  exp?: number\n  rexp?: number\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [x: string]: any\n}\n\nexport interface JWTDecoded {\n  header: JWTHeader\n  payload: JWTPayload\n  signature: string\n  data: string\n}\n\nexport interface JWSDecoded {\n  header: JWTHeader\n  payload: string\n  signature: string\n  data: string\n}\n\nexport interface JWTVerified {\n  payload: Partial<JWTPayload>\n  didResolutionResult: DIDResolutionResult\n  issuer: string\n  signer: VerificationMethod\n  jwt: string\n}\n\nexport interface PublicKeyTypes {\n  [name: string]: string[]\n}\nexport const SUPPORTED_PUBLIC_KEY_TYPES: PublicKeyTypes = {\n  ES256K: [\n    'EcdsaSecp256k1VerificationKey2019',\n    /**\n     * Equivalent to EcdsaSecp256k1VerificationKey2019 when key is an ethereumAddress\n     */\n    'EcdsaSecp256k1RecoveryMethod2020',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\n     */\n    'Secp256k1VerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\n     */\n    'Secp256k1SignatureVerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\n     */\n    'EcdsaPublicKeySecp256k1',\n  ],\n  'ES256K-R': [\n    'EcdsaSecp256k1VerificationKey2019',\n    /**\n     * Equivalent to EcdsaSecp256k1VerificationKey2019 when key is an ethereumAddress\n     */\n    'EcdsaSecp256k1RecoveryMethod2020',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\n     */\n    'Secp256k1VerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\n     */\n    'Secp256k1SignatureVerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\n     */\n    'EcdsaPublicKeySecp256k1',\n  ],\n  Ed25519: ['ED25519SignatureVerification', 'Ed25519VerificationKey2018'],\n  EdDSA: ['ED25519SignatureVerification', 'Ed25519VerificationKey2018'],\n}\n\nexport const SELF_ISSUED_V2 = 'https://self-issued.me/v2'\nexport const SELF_ISSUED_V0_1 = 'https://self-issued.me'\n\ntype LegacyVerificationMethod = { publicKey?: string }\n\nconst defaultAlg = 'ES256K'\nconst DID_JSON = 'application/did+json'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction encodeSection(data: any, shouldCanonicalize = false): string {\n  if (shouldCanonicalize) {\n    return encodeBase64url(<string>canonicalizeData(data))\n  } else {\n    return encodeBase64url(JSON.stringify(data))\n  }\n}\n\nexport const NBF_SKEW = 300\n\nfunction decodeJWS(jws: string): JWSDecoded {\n  const parts = jws.match(/^([a-zA-Z0-9_-]+)\\.([a-zA-Z0-9_-]+)\\.([a-zA-Z0-9_-]+)$/)\n  if (parts) {\n    return {\n      header: JSON.parse(decodeBase64url(parts[1])),\n      payload: parts[2],\n      signature: parts[3],\n      data: `${parts[1]}.${parts[2]}`,\n    }\n  }\n  throw new Error('invalid_argument: Incorrect format JWS')\n}\n\n/**  @module did-jwt/JWT */\n\n/**\n *  Decodes a JWT and returns an object representing the payload\n *\n *  @example\n *  decodeJWT('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpYXQiOjE1...')\n *\n *  @param    {String}            jwt                a JSON Web Token to verify\n *  @return   {Object}                               a JS object representing the decoded JWT\n */\nexport function decodeJWT(jwt: string): JWTDecoded {\n  if (!jwt) throw new Error('invalid_argument: no JWT passed into decodeJWT')\n  try {\n    const jws = decodeJWS(jwt)\n    const decodedJwt: JWTDecoded = Object.assign(jws, { payload: JSON.parse(decodeBase64url(jws.payload)) })\n    return decodedJwt\n  } catch (e) {\n    throw new Error('invalid_argument: Incorrect format JWT')\n  }\n}\n\n/**\n *  Creates a signed JWS given a payload, a signer, and an optional header.\n *\n *  @example\n *  const signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  const jws = await createJWS({ my: 'payload' }, signer)\n *\n *  @param    {Object}            payload           payload object\n *  @param    {Signer}            signer            a signer, see `ES256KSigner or `EdDSASigner`\n *  @param    {Object}            header            optional object to specify or customize the JWS header\n *  @param    {Object}            options           can be used to trigger automatic canonicalization of header and\n *                                                    payload properties\n *  @return   {Promise<string>}                     a Promise which resolves to a JWS string or rejects with an error\n */\nexport async function createJWS(\n  payload: string | Partial<JWTPayload>,\n  signer: Signer,\n  header: Partial<JWTHeader> = {},\n  options: JWSCreationOptions = {}\n): Promise<string> {\n  if (!header.alg) header.alg = defaultAlg\n  const encodedPayload = typeof payload === 'string' ? payload : encodeSection(payload, options.canonicalize)\n  const signingInput: string = [encodeSection(header, options.canonicalize), encodedPayload].join('.')\n\n  const jwtSigner: SignerAlgorithm = SignerAlg(header.alg)\n  const signature: string = await jwtSigner(signingInput, signer)\n  return [signingInput, signature].join('.')\n}\n\n/**\n *  Creates a signed JWT given an address which becomes the issuer, a signer, and a payload for which the signature is over.\n *\n *  @example\n *  const signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  createJWT({address: '5A8bRWU3F7j3REx3vkJ...', signer}, {key1: 'value', key2: ..., ... }).then(jwt => {\n *      ...\n *  })\n *\n *  @param    {Object}            payload               payload object\n *  @param    {Object}            [options]             an unsigned credential object\n *  @param    {String}            options.issuer        The DID of the issuer (signer) of JWT\n *  @param    {String}            options.alg           [DEPRECATED] The JWT signing algorithm to use. Supports: [ES256K, ES256K-R, Ed25519, EdDSA], Defaults to: ES256K.\n *                                                      Please use `header.alg` to specify the algorithm\n *  @param    {Signer}            options.signer        a `Signer` function, Please see `ES256KSigner` or `EdDSASigner`\n *  @param    {boolean}           options.canonicalize  optional flag to canonicalize header and payload before signing\n *  @param    {Object}            header                optional object to specify or customize the JWT header\n *  @return   {Promise<Object, Error>}                  a promise which resolves with a signed JSON Web Token or rejects with an error\n */\nexport async function createJWT(\n  payload: Partial<JWTPayload>,\n  { issuer, signer, alg, expiresIn, canonicalize }: JWTOptions,\n  header: Partial<JWTHeader> = {}\n): Promise<string> {\n  if (!signer) throw new Error('missing_signer: No Signer functionality has been configured')\n  if (!issuer) throw new Error('missing_issuer: No issuing DID has been configured')\n  if (!header.typ) header.typ = 'JWT'\n  if (!header.alg) header.alg = alg\n  const timestamps: Partial<JWTPayload> = {\n    iat: Math.floor(Date.now() / 1000),\n    exp: undefined,\n  }\n  if (expiresIn) {\n    if (typeof expiresIn === 'number') {\n      timestamps.exp = <number>(payload.nbf || timestamps.iat) + Math.floor(expiresIn)\n    } else {\n      throw new Error('invalid_argument: JWT expiresIn is not a number')\n    }\n  }\n  const fullPayload = { ...timestamps, ...payload, iss: issuer }\n  return createJWS(fullPayload, signer, header, { canonicalize })\n}\n\nfunction verifyJWSDecoded(\n  { header, data, signature }: JWSDecoded,\n  pubKeys: VerificationMethod | VerificationMethod[]\n): VerificationMethod {\n  if (!Array.isArray(pubKeys)) pubKeys = [pubKeys]\n  const signer: VerificationMethod = VerifierAlgorithm(header.alg)(data, signature, pubKeys)\n  return signer\n}\n\n/**\n *  Verifies given JWS. If the JWS is valid, returns the public key that was\n *  used to sign the JWS, or throws an `Error` if none of the `pubKeys` match.\n *\n *  @example\n *  const pubKey = verifyJWS('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', { publicKeyHex: '0x12341...' })\n *\n *  @param    {String}                          jws         A JWS string to verify\n *  @param    {Array<VerificationMethod> | VerificationMethod}    pubKeys     The public keys used to verify the JWS\n *  @return   {VerificationMethod}                       The public key used to sign the JWS\n */\nexport function verifyJWS(jws: string, pubKeys: VerificationMethod | VerificationMethod[]): VerificationMethod {\n  const jwsDecoded: JWSDecoded = decodeJWS(jws)\n  return verifyJWSDecoded(jwsDecoded, pubKeys)\n}\n\n/**\n *  Verifies given JWT. If the JWT is valid, the promise returns an object including the JWT, the payload of the JWT,\n *  and the did doc of the issuer of the JWT.\n *\n *  @example\n *  verifyJWT('did:uport:eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', {audience: '5A8bRWU3F7j3REx3vkJ...', callbackUrl: 'https://...'}).then(obj => {\n *      const did = obj.did // DID of signer\n *      const payload = obj.payload\n *      const doc = obj.doc // DID Document of signer\n *      const jwt = obj.jwt\n *      const signerKeyId = obj.signerKeyId // ID of key in DID document that signed JWT\n *      ...\n *  })\n *\n *  @param    {String}            jwt                a JSON Web Token to verify\n *  @param    {Object}            [options]           an unsigned credential object\n *  @param    {Boolean}           options.auth        Require signer to be listed in the authentication section of the DID document (for Authentication purposes)\n *  @param    {String}            options.audience    DID of the recipient of the JWT\n *  @param    {String}            options.callbackUrl callback url in JWT\n *  @return   {Promise<Object, Error>}               a promise which resolves with a response object or rejects with an error\n */\nexport async function verifyJWT(\n  jwt: string,\n  options: JWTVerifyOptions = {\n    resolver: undefined,\n    auth: undefined,\n    audience: undefined,\n    callbackUrl: undefined,\n    skewTime: undefined,\n    proofPurpose: undefined,\n  }\n): Promise<JWTVerified> {\n  if (!options.resolver) throw new Error('missing_resolver: No DID resolver has been configured')\n  const { payload, header, signature, data }: JWTDecoded = decodeJWT(jwt)\n  const proofPurpose: ProofPurposeTypes | undefined = Object.prototype.hasOwnProperty.call(options, 'auth')\n    ? options.auth\n      ? 'authentication'\n      : undefined\n    : options.proofPurpose\n  if (!payload.iss) {\n    throw new Error('invalid_jwt: JWT iss is required')\n  }\n  let did = ''\n  if (payload.iss === SELF_ISSUED_V2) {\n    if (!payload.sub) {\n      throw new Error('invalid_jwt: JWT sub is required')\n    }\n    if (typeof payload.sub_jwk === 'undefined') {\n      did = payload.sub\n    } else {\n      did = (header.kid || '').split('#')[0]\n    }\n  } else if (payload.iss === SELF_ISSUED_V0_1) {\n    if (!payload.did) {\n      throw new Error('invalid_jwt: JWT did is required')\n    }\n    did = payload.did\n  } else {\n    did = payload.iss\n  }\n  if (!did) {\n    throw new Error(`invalid_jwt: No DID has been found in the JWT`)\n  }\n  const { didResolutionResult, authenticators, issuer }: DIDAuthenticator = await resolveAuthenticator(\n    options.resolver,\n    header.alg,\n    did,\n    proofPurpose\n  )\n  const signer: VerificationMethod = await verifyJWSDecoded({ header, data, signature } as JWSDecoded, authenticators)\n  const now: number = Math.floor(Date.now() / 1000)\n  const skewTime = typeof options.skewTime !== 'undefined' && options.skewTime >= 0 ? options.skewTime : NBF_SKEW\n  if (signer) {\n    const nowSkewed = now + skewTime\n    if (payload.nbf) {\n      if (payload.nbf > nowSkewed) {\n        throw new Error(`invalid_jwt: JWT not valid before nbf: ${payload.nbf}`)\n      }\n    } else if (payload.iat && payload.iat > nowSkewed) {\n      throw new Error(`invalid_jwt: JWT not valid yet (issued in the future) iat: ${payload.iat}`)\n    }\n    if (payload.exp && payload.exp <= now - skewTime) {\n      throw new Error(`invalid_jwt: JWT has expired: exp: ${payload.exp} < now: ${now}`)\n    }\n    if (payload.aud) {\n      if (!options.audience && !options.callbackUrl) {\n        throw new Error('invalid_config: JWT audience is required but your app address has not been configured')\n      }\n      const audArray = Array.isArray(payload.aud) ? payload.aud : [payload.aud]\n      const matchedAudience = audArray.find((item) => options.audience === item || options.callbackUrl === item)\n\n      if (typeof matchedAudience === 'undefined') {\n        throw new Error(`invalid_config: JWT audience does not match your DID or callback url`)\n      }\n    }\n    return { payload, didResolutionResult, issuer, signer, jwt }\n  }\n  throw new Error(\n    `invalid_signature: JWT not valid. issuer DID document does not contain a verificationMethod that matches the signature.`\n  )\n}\n\n/**\n * Resolves relevant public keys or other authenticating material used to verify signature from the DID document of provided DID\n *\n *  @example\n *  resolveAuthenticator(resolver, 'ES256K', 'did:uport:2nQtiQG6Cgm1GYTBaaKAgr76uY7iSexUkqX').then(obj => {\n *      const payload = obj.payload\n *      const profile = obj.profile\n *      const jwt = obj.jwt\n *      ...\n *  })\n *\n *  @param    {String}            alg                a JWT algorithm\n *  @param    {String}            did                a Decentralized IDentifier (DID) to lookup\n *  @param    {Boolean}           auth               Restrict public keys to ones specifically listed in the 'authentication' section of DID document\n *  @return   {Promise<DIDAuthenticator>}               a promise which resolves with a response object containing an array of authenticators or if non exist rejects with an error\n */\nexport async function resolveAuthenticator(\n  resolver: Resolvable,\n  alg: string,\n  issuer: string,\n  proofPurpose?: ProofPurposeTypes\n): Promise<DIDAuthenticator> {\n  const types: string[] = SUPPORTED_PUBLIC_KEY_TYPES[alg]\n  if (!types || types.length === 0) {\n    throw new Error(`not_supported: No supported signature types for algorithm ${alg}`)\n  }\n  let didResult: DIDResolutionResult\n\n  const result = (await resolver.resolve(issuer, { accept: DID_JSON })) as unknown\n  // support legacy resolvers that do not produce DIDResolutionResult\n  if (Object.getOwnPropertyNames(result).indexOf('didDocument') === -1) {\n    didResult = {\n      didDocument: result as DIDDocument,\n      didDocumentMetadata: {},\n      didResolutionMetadata: { contentType: DID_JSON },\n    }\n  } else {\n    didResult = result as DIDResolutionResult\n  }\n\n  if (didResult.didResolutionMetadata?.error || didResult.didDocument == null) {\n    const { error, message } = didResult.didResolutionMetadata\n    throw new Error(`resolver_error: Unable to resolve DID document for ${issuer}: ${error}, ${message || ''}`)\n  }\n\n  const getPublicKeyById = (verificationMethods: VerificationMethod[], pubid?: string): VerificationMethod | null => {\n    const filtered = verificationMethods.filter(({ id }) => pubid === id)\n    return filtered.length > 0 ? filtered[0] : null\n  }\n\n  let publicKeysToCheck: VerificationMethod[] = [\n    ...(didResult?.didDocument?.verificationMethod || []),\n    ...(didResult?.didDocument?.publicKey || []),\n  ]\n  if (typeof proofPurpose === 'string') {\n    // support legacy DID Documents that do not list assertionMethod\n    if (\n      proofPurpose.startsWith('assertion') &&\n      !Object.getOwnPropertyNames(didResult?.didDocument).includes('assertionMethod')\n    ) {\n      didResult.didDocument = { ...(<DIDDocument>didResult.didDocument) }\n      didResult.didDocument.assertionMethod = [...publicKeysToCheck.map((pk) => pk.id)]\n    }\n\n    publicKeysToCheck = (didResult.didDocument[proofPurpose] || [])\n      .map((verificationMethod) => {\n        if (typeof verificationMethod === 'string') {\n          return getPublicKeyById(publicKeysToCheck, verificationMethod)\n        } else if (typeof (<LegacyVerificationMethod>verificationMethod).publicKey === 'string') {\n          // this is a legacy format\n          return getPublicKeyById(publicKeysToCheck, (<LegacyVerificationMethod>verificationMethod).publicKey)\n        } else {\n          return <VerificationMethod>verificationMethod\n        }\n      })\n      .filter((key) => key != null) as VerificationMethod[]\n  }\n\n  const authenticators: VerificationMethod[] = publicKeysToCheck.filter(({ type }) =>\n    types.find((supported) => supported === type)\n  )\n\n  if (typeof proofPurpose === 'string' && (!authenticators || authenticators.length === 0)) {\n    throw new Error(\n      `no_suitable_keys: DID document for ${issuer} does not have public keys suitable for ${alg} with ${proofPurpose} purpose`\n    )\n  }\n  if (!authenticators || authenticators.length === 0) {\n    throw new Error(`no_suitable_keys: DID document for ${issuer} does not have public keys for ${alg}`)\n  }\n  return { authenticators, issuer, didResolutionResult: didResult }\n}\n","import { base64ToBytes, bytesToBase64url, decodeBase64url, toSealed } from './util'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ProtectedHeader = Record<string, any> & Partial<RecipientHeader>\n\n/**\n * The JWK representation of an ephemeral public key.\n * See https://www.rfc-editor.org/rfc/rfc7518.html#section-6\n */\ninterface EphemeralPublicKey {\n  kty?: string\n  //ECC\n  crv?: string\n  x?: string\n  y?: string\n  //RSA\n  n?: string\n  e?: string\n}\n\nexport interface RecipientHeader {\n  alg: string\n  iv: string\n  tag: string\n  epk?: EphemeralPublicKey\n  kid?: string\n  apv?: string\n  apu?: string\n}\n\nexport interface Recipient {\n  header: RecipientHeader\n  encrypted_key: string\n}\n\nexport interface JWE {\n  protected: string\n  iv: string\n  ciphertext: string\n  tag: string\n  aad?: string\n  recipients?: Recipient[]\n}\n\nexport interface EncryptionResult {\n  ciphertext: Uint8Array\n  tag: Uint8Array\n  iv: Uint8Array\n  protectedHeader?: string\n  recipient?: Recipient\n  cek?: Uint8Array\n}\n\nexport interface Encrypter {\n  alg: string\n  enc: string\n  encrypt: (cleartext: Uint8Array, protectedHeader: ProtectedHeader, aad?: Uint8Array) => Promise<EncryptionResult>\n  encryptCek?: (cek: Uint8Array) => Promise<Recipient>\n}\n\nexport interface Decrypter {\n  alg: string\n  enc: string\n  decrypt: (sealed: Uint8Array, iv: Uint8Array, aad?: Uint8Array, recipient?: Recipient) => Promise<Uint8Array | null>\n}\n\nfunction validateJWE(jwe: JWE) {\n  if (!(jwe.protected && jwe.iv && jwe.ciphertext && jwe.tag)) {\n    throw new Error('bad_jwe: missing properties')\n  }\n  if (jwe.recipients) {\n    jwe.recipients.map((rec) => {\n      if (!(rec.header && rec.encrypted_key)) {\n        throw new Error('bad_jwe: malformed recipients')\n      }\n    })\n  }\n}\n\nfunction encodeJWE({ ciphertext, tag, iv, protectedHeader, recipient }: EncryptionResult, aad?: Uint8Array): JWE {\n  const jwe: JWE = {\n    protected: <string>protectedHeader,\n    iv: bytesToBase64url(iv),\n    ciphertext: bytesToBase64url(ciphertext),\n    tag: bytesToBase64url(tag),\n  }\n  if (aad) jwe.aad = bytesToBase64url(aad)\n  if (recipient) jwe.recipients = [recipient]\n  return jwe\n}\n\nexport async function createJWE(\n  cleartext: Uint8Array,\n  encrypters: Encrypter[],\n  protectedHeader = {},\n  aad?: Uint8Array\n): Promise<JWE> {\n  if (encrypters[0].alg === 'dir') {\n    if (encrypters.length > 1) throw new Error('not_supported: Can only do \"dir\" encryption to one key.')\n    const encryptionResult = await encrypters[0].encrypt(cleartext, protectedHeader, aad)\n    return encodeJWE(encryptionResult, aad)\n  } else {\n    const tmpEnc = encrypters[0].enc\n    if (!encrypters.reduce((acc, encrypter) => acc && encrypter.enc === tmpEnc, true)) {\n      throw new Error('invalid_argument: Incompatible encrypters passed')\n    }\n    let cek\n    let jwe\n    for (const encrypter of encrypters) {\n      if (!cek) {\n        const encryptionResult = await encrypter.encrypt(cleartext, protectedHeader, aad)\n        cek = encryptionResult.cek\n        jwe = encodeJWE(encryptionResult, aad)\n      } else {\n        const recipient = await encrypter.encryptCek?.(cek)\n        if (recipient) {\n          jwe?.recipients?.push(recipient)\n        }\n      }\n    }\n    return <JWE>jwe\n  }\n}\n\nexport async function decryptJWE(jwe: JWE, decrypter: Decrypter): Promise<Uint8Array> {\n  validateJWE(jwe)\n  const protHeader = JSON.parse(decodeBase64url(jwe.protected))\n  if (protHeader.enc !== decrypter.enc)\n    throw new Error(`not_supported: Decrypter does not supported: '${protHeader.enc}'`)\n  const sealed = toSealed(jwe.ciphertext, jwe.tag)\n  const aad = new Uint8Array(Buffer.from(jwe.aad ? `${jwe.protected}.${jwe.aad}` : jwe.protected))\n  let cleartext = null\n  if (protHeader.alg === 'dir' && decrypter.alg === 'dir') {\n    cleartext = await decrypter.decrypt(sealed, base64ToBytes(jwe.iv), aad)\n  } else if (!jwe.recipients || jwe.recipients.length === 0) {\n    throw new Error('bad_jwe: missing recipients')\n  } else {\n    for (let i = 0; !cleartext && i < jwe.recipients.length; i++) {\n      const recipient = jwe.recipients[i]\n      Object.assign(recipient.header, protHeader)\n      if (recipient.header.alg === decrypter.alg) {\n        cleartext = await decrypter.decrypt(sealed, base64ToBytes(jwe.iv), aad, recipient)\n      }\n    }\n  }\n  if (cleartext === null) throw new Error('failure: Failed to decrypt')\n  return cleartext\n}\n","import { sharedKey } from '@stablelib/x25519'\n\n/**\n * A wrapper around `mySecretKey` that can compute a shared secret using `theirPublicKey`.\n * The promise should resolve to a `Uint8Array` containing the raw shared secret.\n *\n * This method is meant to be used when direct access to a secret key is impossible or not desired.\n *\n * @param theirPublicKey `Uint8Array` the other party's public key\n * @returns a `Promise` that resolves to a `Uint8Array` representing the computed shared secret\n */\nexport type ECDH = (theirPublicKey: Uint8Array) => Promise<Uint8Array>\n\n/**\n * Wraps an X25519 secret key into an ECDH method that can be used to compute a shared secret with a public key.\n * @param mySecretKey A `Uint8Array` of length 32 representing the bytes of my secret key\n * @returns an `ECDH` method with the signature `(theirPublicKey: Uint8Array) => Promise<Uint8Array>`\n *\n * @throws 'invalid_argument:...' if the secret key size is wrong\n */\nexport function createX25519ECDH(mySecretKey: Uint8Array): ECDH {\n  if (mySecretKey.length !== 32) {\n    throw new Error('invalid_argument: incorrect secret key length for X25519')\n  }\n  return async (theirPublicKey: Uint8Array): Promise<Uint8Array> => {\n    if (theirPublicKey.length !== 32) {\n      throw new Error('invalid_argument: incorrect publicKey key length for X25519')\n    }\n    return sharedKey(mySecretKey, theirPublicKey)\n  }\n}\n","import { XChaCha20Poly1305 } from '@stablelib/xchacha20poly1305'\nimport { generateKeyPair, sharedKey } from '@stablelib/x25519'\nimport { randomBytes } from '@stablelib/random'\nimport { concatKDF } from './Digest'\nimport { bytesToBase64url, base58ToBytes, encodeBase64url, toSealed, base64ToBytes } from './util'\nimport { Recipient, EncryptionResult, Encrypter, Decrypter, ProtectedHeader } from './JWE'\nimport type { VerificationMethod, Resolvable } from 'did-resolver'\nimport { ECDH } from './ECDH'\n\n/**\n * Extra parameters for JWE using authenticated encryption\n */\nexport type AuthEncryptParams = {\n  /**\n   * recipient key ID\n   */\n  kid?: string\n\n  /**\n   * See {@link https://datatracker.ietf.org/doc/html/rfc7518#section-4.6.1.2}\n   * base64url encoded\n   */\n  apu?: string\n\n  /**\n   * See {@link https://datatracker.ietf.org/doc/html/rfc7518#section-4.6.1.3}\n   * base64url encoded\n   */\n  apv?: string\n}\n\n/**\n * Extra parameters for JWE using anonymous encryption\n */\nexport type AnonEncryptParams = {\n  /**\n   * recipient key ID\n   */\n  kid?: string\n}\n\n/**\n * Recommended encrypter for authenticated encryption (i.e. sender authentication and requires\n * sender private key to encrypt the data).\n * Uses {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU v3 } and\n * {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW v2 }.\n *\n * @param recipientPublicKey the byte array representing the recipient public key\n * @param senderSecret either a Uint8Array representing the sender secret key or\n *   an ECDH function that wraps the key and can promise a shared secret given a public key\n * @param options {@link AuthEncryptParams} used to specify extra header parameters\n *\n * @returns an {@link Encrypter} instance usable with {@link createJWE}\n *\n * NOTE: ECDH-1PU and XC20PKW are proposed drafts in IETF and not a standard yet and\n * are subject to change as new revisions or until the official CFRG specification are released.\n *\n * @beta\n */\nexport function createAuthEncrypter(\n  recipientPublicKey: Uint8Array,\n  senderSecret: Uint8Array | ECDH,\n  options: Partial<AuthEncryptParams> = {}\n): Encrypter {\n  return xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2(recipientPublicKey, senderSecret, options)\n}\n\n/**\n * Recommended encrypter for anonymous encryption (i.e. no sender authentication).\n * Uses {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | ECDH-ES+XC20PKW v2}.\n *\n * @param publicKey the byte array representing the recipient public key\n * @param options {@link AnonEncryptParams} used to specify the recipient key ID (`kid`)\n *\n * @returns an {@link Encrypter} instance usable with {@link createJWE}\n *\n * NOTE: ECDH-ES+XC20PKW is a proposed draft in IETF and not a standard yet and\n * is subject to change as new revisions or until the official CFRG specification is released.\n *\n * @beta\n */\nexport function createAnonEncrypter(publicKey: Uint8Array, options: Partial<AnonEncryptParams> = {}): Encrypter {\n  return x25519Encrypter(publicKey, options?.kid)\n}\n\n/**\n * Recommended decrypter for authenticated encryption (i.e. sender authentication and requires\n * sender public key to decrypt the data).\n * Uses {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU v3 } and\n * {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW v2 }.\n *\n * @param recipientSecret either a Uint8Array representing the recipient secret key or\n *   an ECDH function that wraps the key and can promise a shared secret given a public key\n * @param senderPublicKey the byte array representing the sender public key\n *\n * @returns a {@link Decrypter} instance usable with {@link decryptJWE}\n *\n * NOTE: ECDH-1PU and XC20PKW are proposed drafts in IETF and not a standard yet and\n * are subject to change as new revisions or until the official CFRG specification are released.\n *\n * @beta\n */\nexport function createAuthDecrypter(recipientSecret: Uint8Array | ECDH, senderPublicKey: Uint8Array): Decrypter {\n  return xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2(recipientSecret, senderPublicKey)\n}\n\n/**\n * Recommended decrypter for anonymous encryption (i.e. no sender authentication).\n * Uses {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | ECDH-ES+XC20PKW v2 }.\n *\n * @param recipientSecret either a Uint8Array representing the recipient secret key or\n *   an ECDH function that wraps the key and can promise a shared secret given a public key\n *\n * @returns a {@link Decrypter} instance usable with {@link decryptJWE}\n *\n * NOTE: ECDH-ES+XC20PKW is a proposed draft in IETF and not a standard yet and\n * is subject to change as new revisions or until the official CFRG specification is released.\n *\n * @beta\n */\nexport function createAnonDecrypter(recipientSecret: Uint8Array | ECDH): Decrypter {\n  return x25519Decrypter(recipientSecret)\n}\n\nfunction xc20pEncrypter(key: Uint8Array): (cleartext: Uint8Array, aad?: Uint8Array) => EncryptionResult {\n  const cipher = new XChaCha20Poly1305(key)\n  return (cleartext: Uint8Array, aad?: Uint8Array) => {\n    const iv = randomBytes(cipher.nonceLength)\n    const sealed = cipher.seal(iv, cleartext, aad)\n    return {\n      ciphertext: sealed.subarray(0, sealed.length - cipher.tagLength),\n      tag: sealed.subarray(sealed.length - cipher.tagLength),\n      iv,\n    }\n  }\n}\n\nexport function xc20pDirEncrypter(key: Uint8Array): Encrypter {\n  const xc20pEncrypt = xc20pEncrypter(key)\n  const enc = 'XC20P'\n  const alg = 'dir'\n  async function encrypt(\n    cleartext: Uint8Array,\n    protectedHeader: ProtectedHeader = {},\n    aad?: Uint8Array\n  ): Promise<EncryptionResult> {\n    const protHeader = encodeBase64url(JSON.stringify(Object.assign({ alg }, protectedHeader, { enc })))\n    const encodedAad = new Uint8Array(Buffer.from(aad ? `${protHeader}.${bytesToBase64url(aad)}` : protHeader))\n    return {\n      ...xc20pEncrypt(cleartext, encodedAad),\n      protectedHeader: protHeader,\n    }\n  }\n  return { alg, enc, encrypt }\n}\n\nexport function xc20pDirDecrypter(key: Uint8Array): Decrypter {\n  const cipher = new XChaCha20Poly1305(key)\n  async function decrypt(sealed: Uint8Array, iv: Uint8Array, aad?: Uint8Array): Promise<Uint8Array | null> {\n    return cipher.open(iv, sealed, aad)\n  }\n  return { alg: 'dir', enc: 'XC20P', decrypt }\n}\n\nexport function x25519Encrypter(publicKey: Uint8Array, kid?: string): Encrypter {\n  const alg = 'ECDH-ES+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n  async function encryptCek(cek: Uint8Array): Promise<Recipient> {\n    const epk = generateKeyPair()\n    const sharedSecret = sharedKey(epk.secretKey, publicKey)\n    // Key Encryption Key\n    const kek = concatKDF(sharedSecret, keyLen, alg)\n    const res = xc20pEncrypter(kek)(cek)\n    const recipient: Recipient = {\n      encrypted_key: bytesToBase64url(res.ciphertext),\n      header: {\n        alg,\n        iv: bytesToBase64url(res.iv),\n        tag: bytesToBase64url(res.tag),\n        epk: { kty: 'OKP', crv, x: bytesToBase64url(epk.publicKey) },\n      },\n    }\n    if (kid) recipient.header.kid = kid\n    return recipient\n  }\n  async function encrypt(\n    cleartext: Uint8Array,\n    protectedHeader: ProtectedHeader = {},\n    aad?: Uint8Array\n  ): Promise<EncryptionResult> {\n    // we won't want alg to be set to dir from xc20pDirEncrypter\n    Object.assign(protectedHeader, { alg: undefined })\n    // Content Encryption Key\n    const cek = randomBytes(32)\n    return {\n      ...(await xc20pDirEncrypter(cek).encrypt(cleartext, protectedHeader, aad)),\n      recipient: await encryptCek(cek),\n      cek,\n    }\n  }\n  return { alg, enc: 'XC20P', encrypt, encryptCek }\n}\n\n/**\n * Implements ECDH-1PU+XC20PKW with XChaCha20Poly1305 based on the following specs:\n *   - {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW}\n *   - {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU}\n */\nexport function xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2(\n  recipientPublicKey: Uint8Array,\n  senderSecret: Uint8Array | ECDH,\n  options: Partial<AuthEncryptParams> = {}\n): Encrypter {\n  const alg = 'ECDH-1PU+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n\n  let partyUInfo: Uint8Array\n  let partyVInfo: Uint8Array\n  if (options.apu !== undefined) partyUInfo = base64ToBytes(options.apu)\n  if (options.apv !== undefined) partyVInfo = base64ToBytes(options.apv)\n\n  async function encryptCek(cek: Uint8Array): Promise<Recipient> {\n    const epk = generateKeyPair()\n    const zE = sharedKey(epk.secretKey, recipientPublicKey)\n\n    // ECDH-1PU requires additional shared secret between\n    // static key of sender and static key of recipient\n    let zS\n    if (senderSecret instanceof Uint8Array) {\n      zS = sharedKey(senderSecret, recipientPublicKey)\n    } else {\n      zS = await senderSecret(recipientPublicKey)\n    }\n\n    const sharedSecret = new Uint8Array(zE.length + zS.length)\n    sharedSecret.set(zE)\n    sharedSecret.set(zS, zE.length)\n\n    // Key Encryption Key\n    const kek = concatKDF(sharedSecret, keyLen, alg, partyUInfo, partyVInfo)\n\n    const res = xc20pEncrypter(kek)(cek)\n    const recipient: Recipient = {\n      encrypted_key: bytesToBase64url(res.ciphertext),\n      header: {\n        alg,\n        iv: bytesToBase64url(res.iv),\n        tag: bytesToBase64url(res.tag),\n        epk: { kty: 'OKP', crv, x: bytesToBase64url(epk.publicKey) },\n      },\n    }\n    if (options.kid) recipient.header.kid = options.kid\n    if (options.apu) recipient.header.apu = options.apu\n    if (options.apv) recipient.header.apv = options.apv\n\n    return recipient\n  }\n  async function encrypt(\n    cleartext: Uint8Array,\n    protectedHeader: ProtectedHeader = {},\n    aad?: Uint8Array\n  ): Promise<EncryptionResult> {\n    // we won't want alg to be set to dir from xc20pDirEncrypter\n    Object.assign(protectedHeader, { alg: undefined })\n    // Content Encryption Key\n    const cek = randomBytes(32)\n    return {\n      ...(await xc20pDirEncrypter(cek).encrypt(cleartext, protectedHeader, aad)),\n      recipient: await encryptCek(cek),\n      cek,\n    }\n  }\n  return { alg, enc: 'XC20P', encrypt, encryptCek }\n}\n\nexport async function resolveX25519Encrypters(dids: string[], resolver: Resolvable): Promise<Encrypter[]> {\n  const encryptersForDID = async (did: string, resolved: string[] = []): Promise<Encrypter[]> => {\n    const { didResolutionMetadata, didDocument } = await resolver.resolve(did)\n    resolved.push(did)\n    if (didResolutionMetadata?.error || didDocument == null) {\n      throw new Error(\n        `resolver_error: Could not resolve ${did}: ${didResolutionMetadata.error}, ${didResolutionMetadata.message}`\n      )\n    }\n    let controllerEncrypters: Encrypter[] = []\n    if (!didDocument.controller && !didDocument.keyAgreement) {\n      throw new Error(`no_suitable_keys: Could not find x25519 key for ${did}`)\n    }\n    if (didDocument.controller) {\n      let controllers = Array.isArray(didDocument.controller) ? didDocument.controller : [didDocument.controller]\n      controllers = controllers.filter((c) => !resolved.includes(c))\n      const encrypterPromises = controllers.map((did) =>\n        encryptersForDID(did, resolved).catch(() => {\n          return []\n        })\n      )\n      const encrypterArrays = await Promise.all(encrypterPromises)\n      controllerEncrypters = ([] as Encrypter[]).concat(...encrypterArrays)\n    }\n    const agreementKeys: VerificationMethod[] = didDocument.keyAgreement\n      ?.map((key) => {\n        if (typeof key === 'string') {\n          return [...(didDocument.publicKey || []), ...(didDocument.verificationMethod || [])].find(\n            (pk) => pk.id === key\n          )\n        }\n        return key\n      })\n      ?.filter((key) => typeof key !== 'undefined') as VerificationMethod[]\n    const pks =\n      agreementKeys?.filter((key) => {\n        // TODO: should be able to use non base58 keys too\n        return key.type === 'X25519KeyAgreementKey2019' && Boolean(key.publicKeyBase58)\n      }) ?? []\n    if (!pks.length && !controllerEncrypters.length)\n      throw new Error(`no_suitable_keys: Could not find x25519 key for ${did}`)\n    return pks\n      .map((pk) => x25519Encrypter(base58ToBytes(<string>pk.publicKeyBase58), pk.id))\n      .concat(...controllerEncrypters)\n  }\n\n  const encrypterPromises = dids.map((did) => encryptersForDID(did))\n  const encrypterArrays = await Promise.all(encrypterPromises)\n  const flattenedArray = ([] as Encrypter[]).concat(...encrypterArrays)\n  return flattenedArray\n}\n\nfunction validateHeader(header?: ProtectedHeader) {\n  if (!(header && header.epk && header.iv && header.tag)) {\n    throw new Error('bad_jwe: malformed header')\n  }\n}\n\nexport function x25519Decrypter(receiverSecret: Uint8Array | ECDH): Decrypter {\n  const alg = 'ECDH-ES+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n  async function decrypt(\n    sealed: Uint8Array,\n    iv: Uint8Array,\n    aad?: Uint8Array,\n    recipient?: Recipient\n  ): Promise<Uint8Array | null> {\n    validateHeader(recipient?.header)\n    recipient = <Recipient>recipient\n    if (recipient.header.epk?.crv !== crv || typeof recipient.header.epk.x == 'undefined') return null\n    const publicKey = base64ToBytes(recipient.header.epk.x)\n    let sharedSecret\n    if (receiverSecret instanceof Uint8Array) {\n      sharedSecret = sharedKey(receiverSecret, publicKey)\n    } else {\n      sharedSecret = await receiverSecret(publicKey)\n    }\n\n    // Key Encryption Key\n    const kek = concatKDF(sharedSecret, keyLen, alg)\n    // Content Encryption Key\n    const sealedCek = toSealed(<string>recipient.encrypted_key, recipient.header.tag)\n    const cek = await xc20pDirDecrypter(kek).decrypt(sealedCek, base64ToBytes(recipient.header.iv))\n    if (cek === null) return null\n\n    return xc20pDirDecrypter(cek).decrypt(sealed, iv, aad)\n  }\n  return { alg, enc: 'XC20P', decrypt }\n}\n\n/**\n * Implements ECDH-1PU+XC20PKW with XChaCha20Poly1305 based on the following specs:\n *   - {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW}\n *   - {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU}\n */\nexport function xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2(\n  recipientSecret: Uint8Array | ECDH,\n  senderPublicKey: Uint8Array\n): Decrypter {\n  const alg = 'ECDH-1PU+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n  async function decrypt(\n    sealed: Uint8Array,\n    iv: Uint8Array,\n    aad?: Uint8Array,\n    recipient?: Recipient\n  ): Promise<Uint8Array | null> {\n    recipient = <Recipient>recipient\n    validateHeader(recipient.header)\n    if (recipient.header.epk?.crv !== crv || typeof recipient.header.epk.x == 'undefined') return null\n    // ECDH-1PU requires additional shared secret between\n    // static key of sender and static key of recipient\n    const publicKey = base64ToBytes(recipient.header.epk.x)\n    let zE: Uint8Array\n    let zS: Uint8Array\n\n    if (recipientSecret instanceof Uint8Array) {\n      zE = sharedKey(recipientSecret, publicKey)\n      zS = sharedKey(recipientSecret, senderPublicKey)\n    } else {\n      zE = await recipientSecret(publicKey)\n      zS = await recipientSecret(senderPublicKey)\n    }\n\n    const sharedSecret = new Uint8Array(zE.length + zS.length)\n    sharedSecret.set(zE)\n    sharedSecret.set(zS, zE.length)\n\n    // Key Encryption Key\n    let producerInfo\n    let consumerInfo\n    if (recipient.header.apu) producerInfo = base64ToBytes(recipient.header.apu)\n    if (recipient.header.apv) consumerInfo = base64ToBytes(recipient.header.apv)\n\n    const kek = concatKDF(sharedSecret, keyLen, alg, producerInfo, consumerInfo)\n    // Content Encryption Key\n    const sealedCek = toSealed(recipient.encrypted_key, recipient.header.tag)\n    const cek = await xc20pDirDecrypter(kek).decrypt(sealedCek, base64ToBytes(recipient.header.iv))\n    if (cek === null) return null\n\n    return xc20pDirDecrypter(cek).decrypt(sealed, iv, aad)\n  }\n  return { alg, enc: 'XC20P', decrypt }\n}\n"],"names":["bytesToBase64url","b","u8a","toString","base64ToBytes","s","inputBase64Url","replace","fromString","base58ToBytes","bytesToBase58","hexToBytes","input","startsWith","substring","toLowerCase","encodeBase64url","decodeBase64url","bytesToHex","stringToBytes","toJose","r","recoveryParam","recoverable","jose","Uint8Array","set","Error","fromJose","signature","signatureBytes","length","TypeError","slice","undefined","toSealed","ciphertext","tag","concat","hexMatcher","base58Matcher","base64Matcher","parseKey","test","leftpad","data","size","repeat","sha256","payload","hash","keccak","keccak_256","arrayBuffer","toEthereumAddress","hexPublicKey","hashInput","writeUint32BE","value","array","encoded","lengthAndInput","concatKDF","secret","keyLen","alg","producerInfo","consumerInfo","roundNumber","secp256k1","EC","ES256KSigner","privateKey","privateKeyBytes","keyPair","keyFromPrivate","sign","SimpleSigner","hexPrivateKey","signer","EllipticSigner","EdDSASigner","secretKey","dataBytes","sig","NaclSigner","base64PrivateKey","instanceOfEcdsaSignature","object","ES256KSignerAlg","Ed25519SignerAlg","algorithms","ES256K","Ed25519","EdDSA","SignerAlg","impl","zl","zr","sl","sr","hl","hr","rotl","x","n","fn1","a","c","d","e","m","k","fn2","fn3","fn4","fn5","Ripemd160","constructor","blockSize","_a","_b","_c","_d","_e","_blockOffset","_block","_blockSize","_length","_finalized","update","block","offset","i","_update","j","carry","digest","_digest","fill","words","Array","temp","DataView","buffer","getInt32","al","bl","cl","dl","el","ar","br","cr","dr","er","tl","tr","t","setUint32","setInt32","publicKeyToAddress","publicKey","otherAddress","version","publicKeyBuffer","publicKeyHash","step1","step2","step3","checksum","step4","prefix","ec","compressedPublicKey","keyFromPublic","getPublic","encode","bech32","toWords","verifyBlockchainAccountId","blockchainAccountId","chain","split","bip122","cosmos","join","toSignatureObject","rawSig","sigObj","extractPublicKeyBytes","pk","publicKeyBase58","publicKeyBase64","publicKeyHex","publicKeyJwk","crv","y","publicKeyMultibase","base16","base58btc","base64","base64url","bases","baseDecoder","decoder","or","decode","verifyES256K","authenticators","fullPublicKeys","filter","ethereumAddress","blockchainAddressKeys","find","pubBytes","verify","err","verifyRecoverableES256K","signatures","so","checkSignatureAgainstSigner","recoveredKey","recoverPubKey","recoveredPublicKeyHex","recoveredCompressedPublicKeyHex","recoveredAddress","keyHex","map","key","verifyEd25519","clear","VerifierAlgorithm","SUPPORTED_PUBLIC_KEY_TYPES","SELF_ISSUED_V2","SELF_ISSUED_V0_1","defaultAlg","DID_JSON","encodeSection","shouldCanonicalize","canonicalizeData","JSON","stringify","NBF_SKEW","decodeJWS","jws","parts","match","header","parse","decodeJWT","jwt","decodedJwt","Object","assign","createJWS","options","encodedPayload","canonicalize","signingInput","jwtSigner","createJWT","issuer","expiresIn","typ","timestamps","iat","Math","floor","Date","now","exp","nbf","fullPayload","iss","verifyJWSDecoded","pubKeys","isArray","verifyJWS","jwsDecoded","verifyJWT","resolver","auth","audience","callbackUrl","skewTime","proofPurpose","prototype","hasOwnProperty","call","did","sub","sub_jwk","kid","didResolutionResult","resolveAuthenticator","nowSkewed","aud","audArray","matchedAudience","item","types","didResult","result","resolve","accept","getOwnPropertyNames","indexOf","didDocument","didDocumentMetadata","didResolutionMetadata","contentType","error","message","getPublicKeyById","verificationMethods","pubid","filtered","id","publicKeysToCheck","verificationMethod","includes","assertionMethod","type","supported","validateJWE","jwe","protected","iv","recipients","rec","encrypted_key","encodeJWE","protectedHeader","recipient","aad","createJWE","cleartext","encrypters","encryptionResult","encrypt","tmpEnc","enc","reduce","acc","encrypter","cek","encryptCek","push","decryptJWE","decrypter","protHeader","sealed","Buffer","from","decrypt","createX25519ECDH","mySecretKey","theirPublicKey","sharedKey","createAuthEncrypter","recipientPublicKey","senderSecret","xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2","createAnonEncrypter","x25519Encrypter","createAuthDecrypter","recipientSecret","senderPublicKey","xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2","createAnonDecrypter","x25519Decrypter","xc20pEncrypter","cipher","XChaCha20Poly1305","randomBytes","nonceLength","seal","subarray","tagLength","xc20pDirEncrypter","xc20pEncrypt","encodedAad","xc20pDirDecrypter","open","epk","generateKeyPair","sharedSecret","kek","res","kty","partyUInfo","partyVInfo","apu","apv","zE","zS","resolveX25519Encrypters","dids","encryptersForDID","resolved","controllerEncrypters","controller","keyAgreement","controllers","encrypterPromises","catch","encrypterArrays","Promise","all","agreementKeys","pks","Boolean","flattenedArray","validateHeader","receiverSecret","sealedCek"],"mappings":"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"}