import type { CeramicApi, CeramicCommit } from '@ceramicnetwork/common';
import { SubscriptionSet } from '@ceramicnetwork/common';
import { TileDocument } from '@ceramicnetwork/stream-tile';
import { DID } from 'dids';
import type { DidProvider } from './did-provider';
import type { ThreeIdState } from './keyring';
import type { JWE } from 'did-jwt';
import type { StreamID } from '@ceramicnetwork/streamid';
export interface EncData {
    jwe?: JWE;
}
export interface EncKeyMaterial {
    seed: EncData;
    pastSeeds: Array<JWE>;
}
export interface AuthEntry {
    data: EncData;
    id: EncData;
}
export interface AuthMap {
    [did: string]: AuthEntry;
}
export interface NewAuthEntry {
    mapEntry: AuthMap;
    did: DID;
}
interface AuthLinkDocUpdate {
    commit: CeramicCommit;
    docid: StreamID;
    did: string;
}
export declare class ThreeIDX {
    docs: Record<string, TileDocument>;
    ceramic: CeramicApi;
    protected _v03ID?: string;
    protected _subscriptionSet: SubscriptionSet;
    constructor(ceramic?: CeramicApi);
    setDIDProvider(provider: DidProvider): Promise<void>;
    setV03ID(did: string): void;
    get id(): string;
    create3idDoc(docParams: ThreeIdState): Promise<void>;
    get3idVersion(): string;
    loadDoc(name: string, controller: string, family: string): Promise<TileDocument>;
    createAuthLinkUpdate({ did }: NewAuthEntry): Promise<AuthLinkDocUpdate>;
    applyAuthLinkUpdate({ docid, commit, did }: AuthLinkDocUpdate): Promise<void>;
    createIDX(newEntry?: NewAuthEntry): Promise<void>;
    loadIDX(authDid: string): Promise<EncKeyMaterial | null>;
    loadAllDocs(did: string): Promise<void>;
    load3IDDoc(did: string): Promise<void>;
    addAuthEntries(newEntries: Array<NewAuthEntry>): Promise<void>;
    getAuthMap(): AuthMap;
    pinAllDocs(): Promise<void>;
    addKeychainToIDX(): Promise<void>;
    updateKeychainDoc(authMap?: AuthMap, pastSeeds?: Array<JWE>): Promise<void>;
    rotateKeys(threeIdState: ThreeIdState, pastSeeds: Array<JWE>, authMap: AuthMap): Promise<void>;
}
export {};
