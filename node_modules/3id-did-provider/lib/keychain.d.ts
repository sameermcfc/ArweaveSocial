import type { ThreeIDX, AuthEntry, NewAuthEntry } from './three-idx';
import type { DidProvider } from './did-provider';
import Keyring from './keyring';
export declare function newAuthEntry(keyring: Keyring, threeIdDid: string, authId: string, authSecret: Uint8Array): Promise<NewAuthEntry>;
export declare function updateAuthEntry(keyring: Keyring, authEntry: AuthEntry, removedAuthIds: Array<string>, threeIdDid: string, authDid: string): Promise<AuthEntry | null>;
interface KeychainStatus {
    clean: boolean;
    adding: Array<string>;
    removing: Array<string>;
}
export declare class Keychain {
    _keyring: Keyring;
    protected _threeIdx: ThreeIDX;
    private _pendingAdds;
    private _pendingRms;
    constructor(_keyring: Keyring, _threeIdx: ThreeIDX);
    list(): Promise<Array<string>>;
    add(authId: string, authSecret: Uint8Array): Promise<void>;
    remove(authId: string): Promise<void>;
    status(): KeychainStatus;
    commit(): Promise<void>;
    static load(threeIdx: ThreeIDX, authSecret: Uint8Array, makeTmpProvider: (keyring: Keyring, managementKey: string) => DidProvider): Promise<Keychain>;
    static loadFromSeed(threeIdx: ThreeIDX, seed: Uint8Array, did: string, makeTmpProvider: (keyring: Keyring, managementKey: string) => DidProvider): Promise<Keychain>;
    static create(threeIdx: ThreeIDX, makeTmpProvider: (keyring: Keyring, managementKey: string) => DidProvider, seed?: Uint8Array, v03ID?: string): Promise<Keychain>;
}
export {};
