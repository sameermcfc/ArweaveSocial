"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const permissions_1 = __importStar(require("../permissions"));
const store_1 = __importDefault(require("store"));
const getPermFn = () => Promise.resolve([]);
describe('Permissions', () => {
    let permissions;
    beforeEach(() => {
        permissions = new permissions_1.default(getPermFn);
        permissions.setDID('did:3:asdf');
    });
    afterEach(() => {
        store_1.default.clearAll();
    });
    it('Correctly constructed', () => {
        expect(() => new permissions_1.default()).toThrow(/has to be a function/);
        permissions = new permissions_1.default(getPermFn);
        expect(() => permissions.get('app1')).toThrow('DID not set');
        expect(() => permissions.set('app1')).toThrow('DID not set');
    });
    it('set / get correctly', () => {
        permissions.set('app1', ['/1', '/2']);
        permissions.set('app2', ['/a', '/b']);
        expect(permissions.get('app1')).toEqual(['/1', '/2']);
        expect(permissions.get('app2')).toEqual(['/a', '/b']);
        permissions.set('app1', null);
        expect(permissions.get('app1')).toEqual(null);
    });
    it('has works correctly', () => {
        permissions.set('app1', ['/1', '/2']);
        expect(permissions.has(permissions_1.SELF_ORIGIN)).toBeTruthy();
        expect(permissions.has(permissions_1.SELF_ORIGIN, ['a', 'b', 'c'])).toBeTruthy();
        expect(permissions.has('app1')).toBeTruthy();
        expect(permissions.has('app2')).toBeFalsy();
        expect(permissions.has('app1', ['/1'])).toBeTruthy();
        expect(permissions.has('app1', ['/1', '/2'])).toBeTruthy();
        expect(permissions.has('app1', ['/1', '/2', '/3'])).toBeFalsy();
    });
    it('request works correctly', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(yield permissions.request('app1', [])).toEqual([]);
        expect(yield permissions.request('app1', ['/1'])).toEqual([]);
        permissions.getPermission = () => null;
        expect(yield permissions.request('app2', [])).toEqual(null);
        expect(yield permissions.request('app1', [])).toEqual([]);
        permissions.getPermission = () => Promise.resolve(['/1']);
        expect(yield permissions.request('app1', ['/1'])).toEqual(['/1']);
        expect(yield permissions.request('app1', ['/1', '/2'])).toEqual(['/1']);
        permissions.getPermission = () => Promise.resolve(['/1', '/2']);
        expect(yield permissions.request('app1', ['/1', '/2'])).toEqual(['/1', '/2']);
    }));
});
//# sourceMappingURL=permissions.test.js.map