"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const u8a = __importStar(require("uint8arrays"));
const random_1 = require("@stablelib/random");
const keyring_1 = __importDefault(require("../keyring"));
describe('Keyring', () => {
    const seed = u8a.fromString('f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b', 'base16');
    it('Generates random seed if none passed', () => {
        const keyring = new keyring_1.default();
        expect(keyring.seed).toBeDefined();
    });
    it('Derives correct keys from seed', () => {
        const keyring = new keyring_1.default(seed);
        expect(keyring.seed).toEqual(seed);
        expect(keyring.pastSeeds).toEqual([]);
        expect(keyring.get3idState(true)).toMatchSnapshot();
        expect(keyring.get3idState()).toMatchSnapshot();
        expect(keyring.getEncryptionPublicKey()).toMatchSnapshot();
        expect(keyring.seed).toMatchSnapshot();
        expect(keyring.v03ID).not.toBeDefined();
    });
    it('Generates correct state if v03ID is set', () => {
        const v03ID = 'did:3:abc3234';
        const keyring = new keyring_1.default(seed, v03ID);
        expect(keyring.get3idState(true)).toMatchSnapshot();
        expect(keyring.get3idState()).toMatchSnapshot();
        expect(keyring.v03ID).toEqual(v03ID);
    });
    it('generate and load keys', () => __awaiter(void 0, void 0, void 0, function* () {
        const seed = random_1.randomBytes(32);
        const keyring = new keyring_1.default(seed);
        expect(keyring.seed).toEqual(seed);
        const signed0 = yield keyring.getSigner()('asdf');
        const mgmt0 = keyring.get3idState().metadata.controllers[0].split(':')[2];
        const v0 = 'versionCID0';
        yield keyring.generateNewKeys(v0);
        expect(keyring.seed).not.toEqual(seed);
        expect(yield keyring.getSigner(v0)('asdf')).toEqual(signed0);
        const signed1 = yield keyring.getSigner()('asdf');
        expect(signed1).not.toEqual(signed0);
        const mgmt1 = keyring.get3idState().metadata.controllers[0].split(':')[2];
        const v1 = 'versionCID1';
        yield keyring.generateNewKeys(v1);
        expect(keyring.seed).not.toEqual(seed);
        expect(yield keyring.getSigner(v0)('asdf')).toEqual(signed0);
        expect(yield keyring.getSigner(v1)('asdf')).toEqual(signed1);
        const signed2 = yield keyring.getSigner()('asdf');
        expect(signed2).not.toEqual(signed0);
        expect(signed2).not.toEqual(signed1);
        const docState2 = keyring.get3idState();
        const mgmt2 = keyring.get3idState().metadata.controllers[0].split(':')[2];
        const mgmtSigs = yield Promise.all([
            keyring.getMgmtSigner(mgmt0)('asdf'),
            keyring.getMgmtSigner(mgmt1)('asdf'),
            keyring.getMgmtSigner(mgmt2)('asdf'),
        ]);
        const pastSeeds = keyring.pastSeeds;
        const keyring1 = new keyring_1.default(keyring.seed);
        expect(yield keyring1.getSigner()('asdf')).toEqual(signed2);
        yield keyring1.loadPastSeeds(pastSeeds);
        expect(yield keyring1.getSigner(v0)('asdf')).toEqual(signed0);
        expect(yield keyring1.getSigner(v1)('asdf')).toEqual(signed1);
        expect(keyring1.get3idState()).toEqual(docState2);
        expect(yield Promise.all([
            keyring1.getMgmtSigner(mgmt0)('asdf'),
            keyring1.getMgmtSigner(mgmt1)('asdf'),
            keyring1.getMgmtSigner(mgmt2)('asdf'),
        ])).toEqual(mgmtSigs);
    }));
    it('loads legacy keys correctly', () => __awaiter(void 0, void 0, void 0, function* () {
        const v03ID = 'did:3:abc3234';
        const seed = random_1.randomBytes(32);
        const keyring0 = new keyring_1.default(seed, v03ID);
        const v0 = 'versionCID0';
        yield keyring0.generateNewKeys(v0);
        const pastSeeds = keyring0.pastSeeds;
        const keyring1 = new keyring_1.default(keyring0.seed);
        expect(keyring1.v03ID).not.toBeDefined();
        yield keyring1.loadPastSeeds(pastSeeds);
        expect(keyring1.v03ID).toEqual(v03ID);
        expect(keyring1._keySets).toEqual(keyring0._keySets);
    }));
    it('generateNewKeys throws if version already exist', () => __awaiter(void 0, void 0, void 0, function* () {
        const keyring = new keyring_1.default();
        const v = 'versionCID0';
        yield keyring.generateNewKeys(v);
        yield expect(keyring.generateNewKeys(v)).rejects.toThrow('Key set version already exist');
    }));
});
//# sourceMappingURL=keyring.test.js.map