import type { DIDMethodName, DIDProvider, DIDProviderMethods } from 'dids';
import { HandlerMethods } from 'rpc-utils';
import type { RPCRequest, RPCResponse } from 'rpc-utils';
import Keyring from './keyring';
import { ThreeIDX } from './three-idx';
import Permissions from './permissions';
declare type Origin = string | null | undefined;
export declare type Context = {
    permissions: Permissions;
    threeIdx: ThreeIDX;
    keyring: Keyring;
    origin: Origin;
    forcedDID?: string;
};
export declare const didMethods: HandlerMethods<Context, DIDProviderMethods>;
export interface ProviderConfig {
    permissions: Permissions;
    threeIdx: ThreeIDX;
    keyring: Keyring;
    forcedOrigin?: string;
    forcedDID?: string;
}
declare type HandleMethod = <Name extends DIDMethodName>(origin: string, msg: RPCRequest<DIDProviderMethods, Name>) => Promise<RPCResponse<DIDProviderMethods, Name> | null>;
export declare class DidProvider implements DIDProvider {
    _handle: HandleMethod;
    constructor({ permissions, threeIdx, keyring, forcedOrigin, forcedDID }: ProviderConfig);
    get isDidProvider(): boolean;
    send<Name extends DIDMethodName>(msg: RPCRequest<DIDProviderMethods, Name>, origin?: Origin): Promise<RPCResponse<DIDProviderMethods, Name> | null>;
}
export {};
