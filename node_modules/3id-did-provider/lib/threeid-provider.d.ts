import type { CeramicApi } from '@ceramicnetwork/common';
import { DidProvider } from './did-provider';
import { ThreeIDX } from './three-idx';
import Permissions, { GetPermissionFn } from './permissions';
import { Keychain } from './keychain';
declare type AuthConfig = {
    authId: string;
    authSecret: Uint8Array;
    seed?: never;
};
declare type SeedConfig = {
    authId?: never;
    authSecret?: never;
    seed: Uint8Array;
    did?: string;
};
declare type IDWConfig = {
    getPermission: GetPermissionFn;
    v03ID?: string;
    ceramic: CeramicApi;
    disableIDX?: boolean;
} & (AuthConfig | SeedConfig);
export default class ThreeIdProvider {
    protected _threeIdx: ThreeIDX;
    protected _permissions: Permissions;
    protected _keychain: Keychain;
    constructor(_threeIdx: ThreeIDX, _permissions: Permissions, _keychain: Keychain);
    get keychain(): Keychain;
    get permissions(): Permissions;
    get id(): string;
    static create(config: IDWConfig): Promise<ThreeIdProvider>;
    getDidProvider(forcedOrigin?: string): DidProvider;
}
export {};
