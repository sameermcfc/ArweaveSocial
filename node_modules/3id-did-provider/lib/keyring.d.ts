import { Signer, Decrypter, JWE } from 'did-jwt';
import type { StreamMetadata } from '@ceramicnetwork/common';
export declare const LATEST = "latest";
export interface ThreeIdState {
    metadata: StreamMetadata;
    content?: Record<string, any>;
}
export interface KeySet {
    signing: Uint8Array;
    management: Uint8Array;
    encryption: Uint8Array;
}
interface FullKeySet {
    seed: Uint8Array;
    publicKeys: KeySet;
    secretKeys: KeySet;
    v03ID?: string;
}
export default class Keyring {
    protected _keySets: Record<string, FullKeySet>;
    protected _versionMap: Record<string, string>;
    protected _pastSeeds: Array<JWE>;
    protected _v03ID?: string;
    constructor(seed?: Uint8Array, v03ID?: string);
    get v03ID(): string | undefined;
    get seed(): Uint8Array;
    get pastSeeds(): Array<JWE>;
    loadPastSeeds(pastSeeds: Array<JWE>): Promise<void>;
    _updateVersionMap(version: string, keySet: FullKeySet): void;
    generateNewKeys(prevVersion: string): Promise<void>;
    getAsymDecrypter(fragments?: Array<string>, version?: string): Decrypter;
    asymDecryptJWE(jwe: JWE, kids: Array<string>, version?: string): Promise<Record<string, any>>;
    asymEncryptJWE(cleartext: Record<string, any>, kid?: string): Promise<JWE>;
    getSigner(version?: string): Signer;
    getKeyFragment(version?: string, encKey?: boolean): string;
    getMgmtSigner(pubKey: string): Signer;
    getEncryptionPublicKey(): Uint8Array;
    get3idState(genesis?: boolean): ThreeIdState;
}
export {};
