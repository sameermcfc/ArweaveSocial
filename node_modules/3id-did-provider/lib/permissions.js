"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SELF_ORIGIN = void 0;
const store_1 = __importDefault(require("store"));
exports.SELF_ORIGIN = '__IDW_ORIGIN';
const storageKey = (origin, did) => {
    if (!origin)
        origin = '__NULL_ORIGIN';
    return `3id_permission_${did}_${origin}`;
};
class Permissions {
    constructor(getPermission) {
        this.getPermission = getPermission;
        this.did = null;
        if (typeof this.getPermission !== 'function') {
            throw new Error('getPermission parameter has to be a function');
        }
    }
    setDID(did) {
        this.did = did;
    }
    request(origin, paths = []) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.has(origin, paths)) {
                return paths;
            }
            else {
                const given = yield this.getPermission({
                    type: 'authenticate',
                    origin,
                    payload: { paths },
                });
                const existing = this.get(origin);
                const union = existing
                    ? existing.concat(given ? given.filter((e) => !existing.includes(e)) : [])
                    : given;
                this.set(origin, union);
                return given;
            }
        });
    }
    has(origin, paths = []) {
        if (origin === exports.SELF_ORIGIN)
            return true;
        const currentPaths = this.get(origin);
        return paths.reduce((acc, path) => {
            return acc && Boolean(currentPaths === null || currentPaths === void 0 ? void 0 : currentPaths.includes(path));
        }, Boolean(currentPaths));
    }
    get(origin) {
        if (!this.did)
            throw new Error('DID not set');
        return store_1.default.get(storageKey(origin, this.did));
    }
    set(origin, paths) {
        if (!this.did)
            throw new Error('DID not set');
        store_1.default.set(storageKey(origin, this.did), paths);
    }
}
exports.default = Permissions;
//# sourceMappingURL=permissions.js.map