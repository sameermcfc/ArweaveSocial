"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const did_provider_1 = require("./did-provider");
const three_idx_1 = require("./three-idx");
const permissions_1 = __importStar(require("./permissions"));
const keychain_1 = require("./keychain");
class ThreeIdProvider {
    constructor(_threeIdx, _permissions, _keychain) {
        this._threeIdx = _threeIdx;
        this._permissions = _permissions;
        this._keychain = _keychain;
    }
    get keychain() {
        return this._keychain;
    }
    get permissions() {
        return this._permissions;
    }
    get id() {
        return this._threeIdx.id;
    }
    static create(config) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (config.seed && config.authSecret)
                throw new Error("Can't use both seed and authSecret");
            if (!config.seed && !config.authSecret)
                throw new Error('Either seed or authSecret is needed');
            if (config.authSecret && !config.authId) {
                throw new Error('AuthId must be given along with authSecret');
            }
            if (config.authId && config.disableIDX) {
                throw new Error('AuthId cannot be used with disableIDX');
            }
            const threeIdx = new three_idx_1.ThreeIDX(config.ceramic);
            const permissions = new permissions_1.default(config.getPermission);
            const makeTmpProvider = (keyring, forcedDID) => {
                return new did_provider_1.DidProvider({
                    keyring,
                    permissions,
                    threeIdx,
                    forcedOrigin: permissions_1.SELF_ORIGIN,
                    forcedDID,
                });
            };
            let keychain;
            if (config.seed) {
                if (typeof config.seed === 'string')
                    throw new Error('seed needs to be Uint8Array');
                if (config.did) {
                    keychain = yield keychain_1.Keychain.loadFromSeed(threeIdx, config.seed, config.did, makeTmpProvider);
                }
                else {
                    keychain = yield keychain_1.Keychain.create(threeIdx, makeTmpProvider, config.seed, config.v03ID);
                }
            }
            else if (config.authSecret) {
                keychain = yield keychain_1.Keychain.load(threeIdx, config.authSecret, makeTmpProvider);
            }
            permissions.setDID(threeIdx.id);
            const idw = new ThreeIdProvider(threeIdx, permissions, keychain);
            yield idw._threeIdx.setDIDProvider(idw.getDidProvider(permissions_1.SELF_ORIGIN));
            if (config.authId && !((_a = (yield (keychain === null || keychain === void 0 ? void 0 : keychain.list()))) === null || _a === void 0 ? void 0 : _a.length)) {
                yield idw.keychain.add(config.authId, config.authSecret);
                yield idw.keychain.commit();
            }
            if (idw._threeIdx.docs.idx == null && !config.disableIDX) {
                yield idw._threeIdx.createIDX();
            }
            return idw;
        });
    }
    getDidProvider(forcedOrigin) {
        return new did_provider_1.DidProvider({
            keyring: this.keychain._keyring,
            permissions: this.permissions,
            threeIdx: this._threeIdx,
            forcedOrigin,
        });
    }
}
exports.default = ThreeIdProvider;
//# sourceMappingURL=threeid-provider.js.map