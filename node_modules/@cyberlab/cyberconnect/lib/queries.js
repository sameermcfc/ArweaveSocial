"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setAlias = exports.unfollow = exports.follow = exports.handleQuery = exports.request = exports.querySchemas = exports.setAliasQuerySchema = exports.disconnectQuerySchema = exports.connectQuerySchema = void 0;
var connectQuerySchema = function (_a) {
    var fromAddr = _a.fromAddr, toAddr = _a.toAddr, alias = _a.alias, namespace = _a.namespace, signature = _a.signature;
    return {
        operationName: 'follow',
        query: "mutation follow {\n  follow(fromAddr: \"" + fromAddr + "\", toAddr: \"" + toAddr + "\", alias: \"" + alias + "\", namespace: \"" + namespace + "\", signature: \"" + signature + "\") {\n    result\n  }\n}\n",
        variables: {},
    };
};
exports.connectQuerySchema = connectQuerySchema;
var disconnectQuerySchema = function (_a) {
    var fromAddr = _a.fromAddr, toAddr = _a.toAddr, namespace = _a.namespace, signature = _a.signature;
    return {
        operationName: 'unfollow',
        query: "mutation unfollow {\n  unfollow(fromAddr: \"" + fromAddr + "\", toAddr: \"" + toAddr + "\", namespace: \"" + namespace + "\", signature: \"" + signature + "\") {\n    result\n  }\n}\n",
        variables: {},
    };
};
exports.disconnectQuerySchema = disconnectQuerySchema;
var setAliasQuerySchema = function (_a) {
    var fromAddr = _a.fromAddr, toAddr = _a.toAddr, namespace = _a.namespace, signature = _a.signature, alias = _a.alias;
    return {
        operationName: 'setAlias',
        query: "mutation setAlias {\n  setAlias(fromAddr: \"" + fromAddr + "\", toAddr: \"" + toAddr + "\", alias: \"" + alias + "\", namespace: \"" + namespace + "\", signature: \"" + signature + "\") {\n    result\n  }\n}\n",
        variables: {},
    };
};
exports.setAliasQuerySchema = setAliasQuerySchema;
exports.querySchemas = {
    connect: exports.connectQuerySchema,
    disconnect: exports.disconnectQuerySchema,
    setAlias: exports.setAliasQuerySchema,
};
var request = function (url, data) {
    if (url === void 0) { url = ''; }
    if (data === void 0) { data = {}; }
    return __awaiter(void 0, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fetch(url, {
                        method: 'POST',
                        mode: 'cors',
                        cache: 'no-cache',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        referrerPolicy: 'no-referrer',
                        body: JSON.stringify(data),
                    })];
                case 1:
                    response = _a.sent();
                    return [2 /*return*/, response.json()];
            }
        });
    });
};
exports.request = request;
var handleQuery = function (data, url) {
    return (0, exports.request)(url, data);
};
exports.handleQuery = handleQuery;
var follow = function (_a) {
    var fromAddr = _a.fromAddr, toAddr = _a.toAddr, alias = _a.alias, namespace = _a.namespace, url = _a.url, signature = _a.signature;
    var schema = exports.querySchemas['connect']({
        fromAddr: fromAddr,
        toAddr: toAddr,
        alias: alias,
        namespace: namespace,
        signature: signature,
    });
    return (0, exports.handleQuery)(schema, url);
};
exports.follow = follow;
var unfollow = function (_a) {
    var fromAddr = _a.fromAddr, toAddr = _a.toAddr, namespace = _a.namespace, url = _a.url, signature = _a.signature;
    var schema = exports.querySchemas['disconnect']({
        fromAddr: fromAddr,
        toAddr: toAddr,
        namespace: namespace,
        signature: signature,
    });
    return (0, exports.handleQuery)(schema, url);
};
exports.unfollow = unfollow;
var setAlias = function (_a) {
    var fromAddr = _a.fromAddr, toAddr = _a.toAddr, alias = _a.alias, namespace = _a.namespace, url = _a.url, signature = _a.signature;
    var schema = exports.querySchemas['setAlias']({
        fromAddr: fromAddr,
        toAddr: toAddr,
        alias: alias,
        namespace: namespace,
        signature: signature,
    });
    return (0, exports.handleQuery)(schema, url);
};
exports.setAlias = setAlias;
//# sourceMappingURL=queries.js.map