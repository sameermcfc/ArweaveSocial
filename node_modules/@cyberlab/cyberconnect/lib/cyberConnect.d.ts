import { CeramicClient } from '@ceramicnetwork/http-client';
import ThreeIdProvider from '3id-did-provider';
import { EthereumAuthProvider } from '@3id/connect';
import { SolanaAuthProvider } from '@ceramicnetwork/blockchain-utils-linking';
import { DID } from 'dids';
import { IDX } from '@ceramicstudio/idx';
import { Endpoint, Blockchain, Config } from './types';
import { Caip10Link } from '@ceramicnetwork/stream-caip10-link';
declare class CyberConnect {
    address: string;
    namespace: string;
    endpoint: Endpoint;
    ceramicClient: CeramicClient;
    authProvider: EthereumAuthProvider | SolanaAuthProvider | undefined;
    resolverRegistry: any;
    idxInstance: IDX | undefined;
    signature: string;
    chain: Blockchain;
    chainRef: string;
    provider: any;
    accountLink: Caip10Link | null;
    authId: string;
    did: DID | null;
    threeId: ThreeIdProvider | null;
    threeIdProvider: any;
    constructor(config: Config);
    getAuthProvider(): Promise<void>;
    private setupAuthProvider;
    signWithJwt(): Promise<string>;
    setupDid(): Promise<void>;
    createIdx(): void;
    createAccountLink(): Promise<void>;
    getOutboundLink(): Promise<import("./types").Connections>;
    authenticate(): Promise<void>;
    private ceramicConnect;
    private ceramicDisconnect;
    private ceramicSetAlias;
    connect(targetAddr: string, alias?: string): Promise<void>;
    disconnect(targetAddr: string): Promise<void>;
    setAlias(targetAddr: string, alias: string): Promise<void>;
}
export default CyberConnect;
//# sourceMappingURL=cyberConnect.d.ts.map