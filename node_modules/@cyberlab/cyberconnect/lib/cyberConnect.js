"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var http_client_1 = require("@ceramicnetwork/http-client");
var key_did_resolver_1 = __importDefault(require("key-did-resolver"));
var _3id_did_resolver_1 = __importDefault(require("@ceramicnetwork/3id-did-resolver"));
var _3id_did_provider_1 = __importDefault(require("3id-did-provider"));
var connect_1 = require("@3id/connect");
var blockchain_utils_linking_1 = require("@ceramicnetwork/blockchain-utils-linking");
var sha256_1 = require("@stablelib/sha256");
var uint8arrays_1 = require("uint8arrays");
var dids_1 = require("dids");
var idx_1 = require("@ceramicstudio/idx");
var network_1 = require("./network");
var queries_1 = require("./queries");
var error_1 = require("./error");
var types_1 = require("./types");
var utils_1 = require("./utils");
var stream_caip10_link_1 = require("@ceramicnetwork/stream-caip10-link");
var _1 = require(".");
var CyberConnect = /** @class */ (function () {
    function CyberConnect(config) {
        this.address = '';
        this.signature = '';
        this.chain = types_1.Blockchain.ETH;
        this.chainRef = '';
        this.provider = null;
        this.accountLink = null;
        this.authId = '';
        this.did = null;
        this.threeId = null;
        this.threeIdProvider = null;
        var provider = config.provider, namespace = config.namespace, env = config.env, chainRef = config.chainRef, chain = config.chain;
        if (!namespace) {
            throw new error_1.ConnectError(error_1.ErrorCode.EmptyNamespace);
        }
        this.namespace = namespace;
        this.endpoint = network_1.endpoints[env || _1.Env.PRODUCTION];
        this.ceramicClient = new http_client_1.CeramicClient(this.endpoint.ceramicUrl);
        this.chain = chain || types_1.Blockchain.ETH;
        this.chainRef = chainRef || '';
        this.provider = provider;
        var keyDidResolver = key_did_resolver_1.default.getResolver();
        var threeIdResolver = _3id_did_resolver_1.default.getResolver(this.ceramicClient);
        this.resolverRegistry = __assign(__assign({}, threeIdResolver), keyDidResolver);
    }
    CyberConnect.prototype.getAuthProvider = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.provider) {
                            throw new error_1.ConnectError(error_1.ErrorCode.EmptyEthProvider);
                        }
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        _a = this;
                        return [4 /*yield*/, (0, utils_1.getAddressByProvider)(this.provider, this.chain)];
                    case 2:
                        _a.address = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _b.sent();
                        throw new error_1.ConnectError(error_1.ErrorCode.AuthProviderError, e_1);
                    case 4:
                        switch (this.chain) {
                            case types_1.Blockchain.ETH: {
                                this.authProvider = new connect_1.EthereumAuthProvider(this.provider, this.address);
                                break;
                            }
                            case types_1.Blockchain.SOLANA: {
                                if (!this.provider.publicKey) {
                                    throw new error_1.ConnectError(error_1.ErrorCode.AuthProviderError, 'Wallet Not Connected');
                                }
                                if (!this.provider.signMessage) {
                                    throw new error_1.ConnectError(error_1.ErrorCode.AuthProviderError, 'Provider must implement signMessage');
                                }
                                this.authProvider = new blockchain_utils_linking_1.SolanaAuthProvider(this.provider, this.address, this.chainRef);
                                break;
                            }
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    CyberConnect.prototype.setupAuthProvider = function () {
        return __awaiter(this, void 0, void 0, function () {
            var rst;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.signature) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.getAuthProvider()];
                    case 1:
                        _a.sent();
                        if (!this.authProvider) {
                            throw new error_1.ConnectError(error_1.ErrorCode.EmptyAuthProvider);
                        }
                        return [4 /*yield*/, this.authProvider.authenticate('Allow this account to control your identity')];
                    case 2:
                        rst = _a.sent();
                        this.signature = rst;
                        return [2 /*return*/];
                }
            });
        });
    };
    CyberConnect.prototype.signWithJwt = function () {
        return __awaiter(this, void 0, void 0, function () {
            var timestamp, payload, req, id, sendRes, normalJWS, jwsString;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        timestamp = new Date().getTime();
                        payload = {
                            timestamp: timestamp,
                            target: this.address,
                        };
                        if (!this.threeId) {
                            throw new error_1.ConnectError(error_1.ErrorCode.SignJwtError, 'Empty ThreeId');
                        }
                        req = {
                            method: 'did_createJWS',
                            params: { payload: payload, did: this.threeId.id },
                        };
                        id = 0;
                        if (!this.threeIdProvider) {
                            throw new error_1.ConnectError(error_1.ErrorCode.SignJwtError, 'Empty ThreeId provider');
                        }
                        return [4 /*yield*/, this.threeIdProvider.send(Object.assign({ jsonrpc: '2.0', id: id }, req), null)];
                    case 1:
                        sendRes = _a.sent();
                        if (!sendRes || !sendRes.result) {
                            return [2 /*return*/, ''];
                        }
                        if (!this.did) {
                            throw new error_1.ConnectError(error_1.ErrorCode.SignJwtError, 'Empty DID');
                        }
                        normalJWS = sendRes.result.jws;
                        jwsString = [
                            normalJWS.signatures[0].protected,
                            normalJWS.payload,
                            normalJWS.signatures[0].signature,
                        ].join('.');
                        return [2 /*return*/, jwsString];
                }
            });
        });
    };
    CyberConnect.prototype.setupDid = function () {
        return __awaiter(this, void 0, void 0, function () {
            var getPermission, authSecret, _a, _b;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (this.idxInstance) {
                            return [2 /*return*/];
                        }
                        if (!this.authProvider) {
                            new error_1.ConnectError(error_1.ErrorCode.EmptyAuthProvider).printError();
                            return [2 /*return*/];
                        }
                        if (!this.ceramicClient) {
                            new error_1.ConnectError(error_1.ErrorCode.CeramicError, 'Can not find ceramic client').printError();
                            return [2 /*return*/];
                        }
                        getPermission = function (request) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                return [2 /*return*/, request.payload.paths];
                            });
                        }); };
                        authSecret = (0, sha256_1.hash)((0, uint8arrays_1.fromString)(this.signature.slice(2)));
                        _a = this;
                        return [4 /*yield*/, this.authProvider.accountId()];
                    case 1:
                        _a.authId = (_c.sent()).toString();
                        _b = this;
                        return [4 /*yield*/, _3id_did_provider_1.default.create({
                                getPermission: getPermission,
                                authSecret: authSecret,
                                authId: this.authId,
                                ceramic: this.ceramicClient,
                            })];
                    case 2:
                        _b.threeId = _c.sent();
                        this.threeIdProvider = this.threeId.getDidProvider();
                        this.did = new dids_1.DID({
                            provider: this.threeIdProvider,
                            resolver: this.resolverRegistry,
                        });
                        return [4 /*yield*/, this.did.authenticate()];
                    case 3:
                        _c.sent();
                        return [4 /*yield*/, this.ceramicClient.setDID(this.did)];
                    case 4:
                        _c.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    CyberConnect.prototype.createIdx = function () {
        if (this.idxInstance) {
            return;
        }
        this.idxInstance = new idx_1.IDX({
            ceramic: this.ceramicClient,
            aliases: {
                cyberConnect: this.endpoint.cyberConnectSchema,
            },
            autopin: true,
        });
    };
    CyberConnect.prototype.createAccountLink = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.accountLink && !!this.accountLink.did) {
                            return [2 /*return*/];
                        }
                        _a = this;
                        return [4 /*yield*/, stream_caip10_link_1.Caip10Link.fromAccount(this.ceramicClient, this.authId)];
                    case 1:
                        _a.accountLink = _b.sent();
                        if (!(!this.accountLink.did && this.did && this.authProvider)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.accountLink.setDid(this.did.id, this.authProvider, {
                                anchor: false,
                                publish: false,
                            })];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    CyberConnect.prototype.getOutboundLink = function () {
        return __awaiter(this, void 0, void 0, function () {
            var result, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.idxInstance) {
                            throw new error_1.ConnectError(error_1.ErrorCode.CeramicError, 'Could not find idx instance');
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.idxInstance.get('cyberConnect')];
                    case 2:
                        result = (_a.sent());
                        return [2 /*return*/, (result === null || result === void 0 ? void 0 : result.outboundLink) || []];
                    case 3:
                        e_2 = _a.sent();
                        throw new error_1.ConnectError(error_1.ErrorCode.CeramicError, e_2);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    CyberConnect.prototype.authenticate = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        return [4 /*yield*/, this.setupAuthProvider()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.setupDid()];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.createAccountLink()];
                    case 3:
                        _a.sent();
                        this.createIdx();
                        return [3 /*break*/, 5];
                    case 4:
                        e_3 = _a.sent();
                        throw e_3;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    CyberConnect.prototype.ceramicConnect = function (targetAddr, alias) {
        if (alias === void 0) { alias = ''; }
        return __awaiter(this, void 0, void 0, function () {
            var outboundLink, index, curTimeStr, e_4;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.getOutboundLink()];
                    case 1:
                        outboundLink = _a.sent();
                        if (!this.idxInstance) {
                            throw new error_1.ConnectError(error_1.ErrorCode.CeramicError, 'Could not find idx instance');
                        }
                        index = outboundLink.findIndex(function (link) {
                            return link.target === targetAddr && link.namespace === _this.namespace;
                        });
                        curTimeStr = String(Date.now());
                        if (index === -1) {
                            outboundLink.push({
                                target: targetAddr,
                                connectionType: 'follow',
                                namespace: this.namespace,
                                alias: alias,
                                createdAt: curTimeStr,
                            });
                        }
                        else {
                            outboundLink[index].createdAt = curTimeStr;
                        }
                        this.idxInstance.set('cyberConnect', { outboundLink: outboundLink });
                        return [3 /*break*/, 3];
                    case 2:
                        e_4 = _a.sent();
                        console.error(e_4);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    CyberConnect.prototype.ceramicDisconnect = function (targetAddr) {
        return __awaiter(this, void 0, void 0, function () {
            var outboundLink, newOutboundLink, e_5;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.getOutboundLink()];
                    case 1:
                        outboundLink = _a.sent();
                        if (!this.idxInstance) {
                            throw new error_1.ConnectError(error_1.ErrorCode.CeramicError, 'Could not find idx instance');
                        }
                        newOutboundLink = outboundLink.filter(function (link) {
                            return link.target !== targetAddr || link.namespace !== _this.namespace;
                        });
                        this.idxInstance.set('cyberConnect', {
                            outboundLink: newOutboundLink,
                        });
                        return [3 /*break*/, 3];
                    case 2:
                        e_5 = _a.sent();
                        console.error(e_5);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    CyberConnect.prototype.ceramicSetAlias = function (targetAddr, alias) {
        return __awaiter(this, void 0, void 0, function () {
            var outboundLink, index, e_6;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.getOutboundLink()];
                    case 1:
                        outboundLink = _a.sent();
                        if (!this.idxInstance) {
                            throw new error_1.ConnectError(error_1.ErrorCode.CeramicError, 'Could not find idx instance');
                        }
                        index = outboundLink.findIndex(function (link) {
                            return link.target === targetAddr && link.namespace === _this.namespace;
                        });
                        if (index !== -1) {
                            outboundLink[index] = __assign(__assign({}, outboundLink[index]), { alias: alias });
                            this.idxInstance.set('cyberConnect', { outboundLink: outboundLink });
                        }
                        else {
                            throw new error_1.ConnectError(error_1.ErrorCode.CeramicError, "Couldn't find the target address in the given namespace");
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        e_6 = _a.sent();
                        console.log(e_6);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    CyberConnect.prototype.connect = function (targetAddr, alias) {
        var _a, _b;
        if (alias === void 0) { alias = ''; }
        return __awaiter(this, void 0, void 0, function () {
            var sign, resp, e_7;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.authenticate()];
                    case 1:
                        _c.sent();
                        _c.label = 2;
                    case 2:
                        _c.trys.push([2, 5, , 6]);
                        return [4 /*yield*/, this.signWithJwt()];
                    case 3:
                        sign = _c.sent();
                        return [4 /*yield*/, (0, queries_1.follow)({
                                fromAddr: this.address,
                                toAddr: targetAddr,
                                alias: alias,
                                namespace: this.namespace,
                                url: this.endpoint.cyberConnectApi,
                                signature: sign,
                            })];
                    case 4:
                        resp = _c.sent();
                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.data) === null || _a === void 0 ? void 0 : _a.follow.result) !== 'SUCCESS') {
                            throw new error_1.ConnectError(error_1.ErrorCode.GraphqlError, (_b = resp === null || resp === void 0 ? void 0 : resp.data) === null || _b === void 0 ? void 0 : _b.follow.result);
                        }
                        console.log('Connect success');
                        return [3 /*break*/, 6];
                    case 5:
                        e_7 = _c.sent();
                        throw new error_1.ConnectError(error_1.ErrorCode.GraphqlError, e_7.message || e_7);
                    case 6:
                        this.ceramicConnect(targetAddr, alias);
                        return [2 /*return*/];
                }
            });
        });
    };
    CyberConnect.prototype.disconnect = function (targetAddr) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var sign, resp, e_8;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.authenticate()];
                    case 1:
                        _c.sent();
                        _c.label = 2;
                    case 2:
                        _c.trys.push([2, 5, , 6]);
                        return [4 /*yield*/, this.signWithJwt()];
                    case 3:
                        sign = _c.sent();
                        return [4 /*yield*/, (0, queries_1.unfollow)({
                                fromAddr: this.address,
                                toAddr: targetAddr,
                                url: this.endpoint.cyberConnectApi,
                                namespace: this.namespace,
                                signature: sign,
                            })];
                    case 4:
                        resp = _c.sent();
                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.data) === null || _a === void 0 ? void 0 : _a.unfollow.result) !== 'SUCCESS') {
                            throw new error_1.ConnectError(error_1.ErrorCode.GraphqlError, (_b = resp === null || resp === void 0 ? void 0 : resp.data) === null || _b === void 0 ? void 0 : _b.unfollow.result);
                        }
                        console.log('Disconnect success');
                        return [3 /*break*/, 6];
                    case 5:
                        e_8 = _c.sent();
                        throw new error_1.ConnectError(error_1.ErrorCode.GraphqlError, e_8.message || e_8);
                    case 6:
                        this.ceramicDisconnect(targetAddr);
                        return [2 /*return*/];
                }
            });
        });
    };
    CyberConnect.prototype.setAlias = function (targetAddr, alias) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var sign, resp, e_9;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.authenticate()];
                    case 1:
                        _c.sent();
                        _c.label = 2;
                    case 2:
                        _c.trys.push([2, 5, , 6]);
                        return [4 /*yield*/, this.signWithJwt()];
                    case 3:
                        sign = _c.sent();
                        return [4 /*yield*/, (0, queries_1.setAlias)({
                                fromAddr: this.address,
                                toAddr: targetAddr,
                                url: this.endpoint.cyberConnectApi,
                                namespace: this.namespace,
                                signature: sign,
                                alias: alias,
                            })];
                    case 4:
                        resp = _c.sent();
                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.data) === null || _a === void 0 ? void 0 : _a.setAlias.result) !== 'SUCCESS') {
                            throw new error_1.ConnectError(error_1.ErrorCode.GraphqlError, (_b = resp === null || resp === void 0 ? void 0 : resp.data) === null || _b === void 0 ? void 0 : _b.setAlias.result);
                        }
                        console.log('Set alias success');
                        return [3 /*break*/, 6];
                    case 5:
                        e_9 = _c.sent();
                        throw new error_1.ConnectError(error_1.ErrorCode.GraphqlError, e_9.message || e_9);
                    case 6:
                        this.ceramicSetAlias(targetAddr, alias);
                        return [2 /*return*/];
                }
            });
        });
    };
    return CyberConnect;
}());
exports.default = CyberConnect;
//# sourceMappingURL=cyberConnect.js.map